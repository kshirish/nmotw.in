<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NMOTW]]></title>
  <link href="http://nmotw.in/atom.xml" rel="self"/>
  <link href="http://nmotw.in/"/>
  <updated>2016-03-03T15:15:34+00:00</updated>
  <id>http://nmotw.in/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[color-thief]]></title>
    <link href="http://nmotw.in/color-thief/"/>
    <updated>2016-03-03T14:50:23+00:00</updated>
    <id>http://nmotw.in/color-thief</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/color-thief">color-thief</a></h1>

<blockquote><p>Grab the color palette or dominant color from an image!</p></blockquote>

<p><code>color-thief</code> helps to grab get the dominant color or the color palette from an image, this module makes use of JS, some cool math and the canvas tag to make it happen.</p>

<p><strong>Get it:</strong> <code>npm install --save color-thief</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">colorThief</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ColorThief</span><span class="p">();</span>
</span><span class='line'><span class="nx">colorThief</span><span class="p">.</span><span class="nx">getColor</span><span class="p">(</span><span class="nx">sourceImage</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">getColor(sourceImage[, quality])</span>
</span><span class='line'><span class="cm">returns {r: num, g: num, b: num}</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">colorThief</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ColorThief</span><span class="p">();</span>
</span><span class='line'><span class="nx">colorThief</span><span class="p">.</span><span class="nx">getPalette</span><span class="p">(</span><span class="nx">sourceImage</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">getPalette(sourceImage[, colorCount, quality])</span>
</span><span class='line'><span class="cm">returns [ [num, num, num], [num, num, num], ... ]</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/color-thief/color-thief.gif" alt="color-thief" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[must]]></title>
    <link href="http://nmotw.in/must/"/>
    <updated>2016-02-25T13:59:29+00:00</updated>
    <id>http://nmotw.in/must</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/must">must</a></h1>

<blockquote><p>Testing and assertion library with friendly BDD syntax!</p></blockquote>

<p><code>must</code> provides a BDD syntax for all your assertions and it follows <a href="https://www.ietf.org/rfc/rfc2119.txt">RFC 2119</a> with its use of <strong>MUST</strong>. Good and well testsed stuff.</p>

<p><strong>Get it:</strong> <code>npm install --save must</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s2">&quot;must/register&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">[].</span><span class="nx">must</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">empty</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">must</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">nonenumerable</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="mi">42</span><span class="p">).</span><span class="nx">must</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">above</span><span class="p">(</span><span class="mi">13</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">42</span><span class="p">).</span><span class="nx">must</span><span class="p">.</span><span class="nx">then</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">must</span><span class="p">.</span><span class="nx">eventually</span><span class="p">.</span><span class="nx">not</span><span class="p">.</span><span class="nx">include</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Problemo&quot;</span><span class="p">)).</span><span class="nx">must</span><span class="p">.</span><span class="nx">reject</span><span class="p">.</span><span class="kd">with</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="sr">/problem/i</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/must/must.gif" alt="must.gif" /></p>

<p>We <code>must</code> thank <a href="https://twitter.com/theml">Andri MÃ¶ll</a> for <code>must</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ipt]]></title>
    <link href="http://nmotw.in/ipt/"/>
    <updated>2016-02-18T16:07:50+00:00</updated>
    <id>http://nmotw.in/ipt</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/ipt">ipt</a></h1>

<blockquote><p>The missing shell interactive workflow.</p></blockquote>

<p><code>ipt</code> (pronounced iPipeTo) introduces the missing cli interactive workflow.</p>

<p>It takes any kind of list as an input and uses that list to build an interactive interface to let you select an element from it.</p>

<p>Stop manually dragging your mouse around to copy output data from a terminal, using the ipt workflow you can pipe data from a command and select what to copy to clipboard from a convenient visual menu.</p>

<p>Selected data is also output to stdout allowing for easily composing various workflows - Just create your custom alias!</p>

<p>P.S: Couldn't explain it better than than author!</p>

<p><strong>GET IT:</strong> <code>npm install -g ipt</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git branch -a | ipt | xargs git checkout
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git --no-pager log --oneline | ipt | cut -d <span class="s1">&#39; &#39;</span> -f 1 | xargs -o git rebase -i<span class="err">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>P.S: Don't miss to read the wonderful <a href="https://www.npmjs.com/package/ipt#examples">examples</a>!</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/ipt/ipt.gif" alt="" /></p>

<p>Thanks to <a href="https://github.com/ruyadorno">Ruy Adorno</a> for this cheeky module.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[why-is-node-running]]></title>
    <link href="http://nmotw.in/why-is-node-running/"/>
    <updated>2016-02-11T15:04:17+00:00</updated>
    <id>http://nmotw.in/why-is-node-running</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/why-is-node-running">why-is-node-running</a></h1>

<blockquote><p>Node is running but you don't know why? why-is-node-running is here to help you.</p></blockquote>

<p>This is a cheeky module that plays with <code>process.binding</code> of node, specifically with <code>process.binding('contextify').ContextifyScript;</code> the core of this library is from node's <a href="https://github.com/nodejs/node/blob/88307974e60346bc98c4e9f70a2b6918ccb6844f/src/node.js">source</a>.</p>

<p><strong>GET IT:</strong> <code>npm install --save why-is-node-running</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">log</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;why-is-node-running&#39;</span><span class="p">);</span> <span class="c1">// should be your first require </span>
</span><span class='line'><span class="kd">var</span> <span class="nx">net</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;net&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">createServer</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">createServer</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">createServer</span><span class="p">();</span>
</span><span class='line'><span class="nx">createServer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">()</span> <span class="c1">// logs out active handles that are keeping node running </span>
</span><span class='line'><span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>When executed in <code>/tmp</code> you see an output like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>There are 4 known handle<span class="o">(</span>s<span class="o">)</span> keeping the process running and 0 unknown
</span><span class='line'>Known handles:
</span><span class='line'>
</span><span class='line'><span class="c"># Timer</span>
</span><span class='line'>/private/tmp/l:6  - setInterval<span class="o">(</span><span class="k">function</span> <span class="o">()</span> <span class="o">{}</span>, 1000<span class="o">)</span>;
</span><span class='line'>/private/tmp/l:10 - createServer<span class="o">()</span>;
</span><span class='line'>
</span><span class='line'><span class="c"># TCP</span>
</span><span class='line'>/private/tmp/l:7  - server.listen<span class="o">(</span>0<span class="o">)</span>;
</span><span class='line'>/private/tmp/l:10 - createServer<span class="o">()</span>;
</span><span class='line'>
</span><span class='line'><span class="c"># TCP</span>
</span><span class='line'>/private/tmp/l:7  - server.listen<span class="o">(</span>0<span class="o">)</span>;
</span><span class='line'>/private/tmp/l:11 - createServer<span class="o">()</span>;
</span><span class='line'>
</span><span class='line'><span class="c"># Timer</span>
</span><span class='line'>/private/tmp/l:13 - setTimeout<span class="o">(</span><span class="k">function</span> <span class="o">()</span> <span class="o">{</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="https://nmotw.in/images/why-is-node-running/why-is-node-running.gif" alt="why-is-node-running" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[data.task]]></title>
    <link href="http://nmotw.in/data.task/"/>
    <updated>2016-02-04T14:26:02+00:00</updated>
    <id>http://nmotw.in/data.task</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/data.task">data.task</a></h1>

<blockquote><p>A structure for representing asynchronous actions with automatic resource handling.</p></blockquote>

<p><code>data.task</code> monad which can be used to replace Continuation-Passing Style form of programming,
in order to be able to compose and sequence time-dependent effects using the generic and powerful monadic operations.</p>

<p><strong>GET IT:</strong> <code>npm install --save data.task</code></p>

<p><strong>Sample Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Task</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;data.task&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">&gt;</span> <span class="k">new</span> <span class="nx">Task</span><span class="p">((</span><span class="nx">reject</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{})</span>
</span><span class='line'><span class="nx">Task</span> <span class="p">{</span> <span class="nx">fork</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">],</span> <span class="nx">cleanup</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">]</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Task</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;data.task&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">read</span> <span class="o">=</span> <span class="nx">path</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'><span class="k">return</span> <span class="k">new</span> <span class="nx">Task</span><span class="p">((</span><span class="nx">reject</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>          <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">read</span><span class="p">(</span><span class="s1">&#39;/tmp/data.md&#39;</span><span class="p">).</span><span class="nx">fork</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">,</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW:</strong></p>

<p><img src="http://nmotw.in/images/data.task/data.task.gif" alt="data.task" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[platform]]></title>
    <link href="http://nmotw.in/platform/"/>
    <updated>2016-01-28T13:12:21+00:00</updated>
    <id>http://nmotw.in/platform</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/platform">platform</a></h1>

<blockquote><p>A platform detection library that works on nearly all JavaScript platforms.</p></blockquote>

<p>This module provides the below platfrom based information:</p>

<ul>
<li>description</li>
<li>layout</li>
<li>manufacturer</li>
<li>name</li>
<li>prerelease</li>
<li>product</li>
<li>ua</li>
<li>version</li>
<li>os</li>
</ul>


<p>It can also <code>parse</code> an <code>User-Agent</code> and give the same information.</p>

<p>P.S:<code>platform</code> is for informational purposes only &amp; not intended as a substitution for feature detection/inference checks.</p>

<p><strong>GET IT</strong> : <code>npm install --save platform</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">platform</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;platform&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// on an iPad</span>
</span><span class='line'><span class="nx">platform</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span> <span class="c1">// &#39;Safari&#39;</span>
</span><span class='line'><span class="nx">platform</span><span class="p">.</span><span class="nx">version</span><span class="p">;</span> <span class="c1">// &#39;5.1&#39;</span>
</span><span class='line'><span class="nx">platform</span><span class="p">.</span><span class="nx">product</span><span class="p">;</span> <span class="c1">// &#39;iPad&#39;</span>
</span><span class='line'><span class="nx">platform</span><span class="p">.</span><span class="nx">manufacturer</span><span class="p">;</span> <span class="c1">// &#39;Apple&#39;</span>
</span><span class='line'><span class="nx">platform</span><span class="p">.</span><span class="nx">layout</span><span class="p">;</span> <span class="c1">// &#39;WebKit&#39;</span>
</span><span class='line'><span class="nx">platform</span><span class="p">.</span><span class="nx">os</span><span class="p">;</span> <span class="c1">// &#39;iOS 5.0&#39;</span>
</span><span class='line'><span class="nx">platform</span><span class="p">.</span><span class="nx">description</span><span class="p">;</span> <span class="c1">// &#39;Safari 5.1 on Apple iPad (iOS 5.0)&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">info</span> <span class="o">=</span> <span class="nx">platform</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">&#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7.2; en; rv:2.0) Gecko/20100101 Firefox/4.0 Opera 11.52&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">info</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span> <span class="c1">// &#39;Opera&#39;</span>
</span><span class='line'><span class="nx">info</span><span class="p">.</span><span class="nx">version</span><span class="p">;</span> <span class="c1">// &#39;11.52&#39;</span>
</span><span class='line'><span class="nx">info</span><span class="p">.</span><span class="nx">layout</span><span class="p">;</span> <span class="c1">// &#39;Presto&#39;</span>
</span><span class='line'><span class="nx">info</span><span class="p">.</span><span class="nx">os</span><span class="p">;</span> <span class="c1">// &#39;Mac OS X 10.7.2&#39;</span>
</span><span class='line'><span class="nx">info</span><span class="p">.</span><span class="nx">description</span><span class="p">;</span> <span class="c1">// &#39;Opera 11.52 (identifying as Firefox 4.0) on Mac OS X 10.7.2&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/platform/platform.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iron-node]]></title>
    <link href="http://nmotw.in/iron-node/"/>
    <updated>2016-01-21T16:20:46+00:00</updated>
    <id>http://nmotw.in/iron-node</id>
    <content type="html"><![CDATA[<h1><a href="http://s-a.github.io/iron-node/">iron-node</a></h1>

<blockquote><p>Debug Node.js code with Chrome Developer Tools.</p></blockquote>

<p>Yes you read it right <code>iron-node</code> helps you to debug your node code using chrome devtools, it makes use of <a href="http://electron.atom.io/">electron</a> creates a <code>browser-window</code>
opens the dev-tool re-compile native modules against electron!</p>

<p>It not only helps you to debug your code, but also helps to debug your node build scripts!</p>

<p>Keep in mind to place the keyword <code>debugger;</code> to a place where you want to stop.</p>

<p><strong>Get it:</strong> <code>npm install -g iron-node</code></p>

<p><strong>Sample usage:</strong></p>

<p><strong>CLI:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iron-node PATH_TO_NODE_JS_FILE [--customparm1=foo --customparm2=bar];</span></code></pre></td></tr></table></div></figure>


<p><strong>npm scripts:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  ...
</span><span class='line'>  "scripts": {
</span><span class='line'>    ...
</span><span class='line'>    "debug-mocha": "iron-node node_modules/mocha/bin/_mocha",
</span><span class='line'>    "debug-grunt": "iron-node node_modules/grunt-cli/bin/grunt build",
</span><span class='line'>    "debug-gulp": "iron-node node_modules/gulp/bin/gulp.js",
</span><span class='line'>    ...
</span><span class='line'>  },
</span><span class='line'>  ...</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/iron-node/iron-node.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fp-dom]]></title>
    <link href="http://nmotw.in/fp-dom/"/>
    <updated>2016-01-14T16:52:27+00:00</updated>
    <id>http://nmotw.in/fp-dom</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/fp-dom">fp-dom</a></h1>

<blockquote><p>A collection of functions to favor functional programming in a DOM context.</p></blockquote>

<p>DOM operations in a functional way with <code>fp-dom</code>, it provides support for the below methods:</p>

<ul>
<li>animate</li>
<li>append</li>
<li>addClass</li>
<li>removeClass</li>
<li>toggleClass</li>
<li>hasClass</li>
<li>contains</li>
<li>elem</li>
<li>insertAfter</li>
<li>insertBefore</li>
<li>interval</li>
<li>isdom</li>
<li>isvdom</li>
<li>listen</li>
<li>prepend</li>
<li>replace</li>
<li>select</li>
<li>selectOne</li>
<li>setattr</li>
<li>timeout</li>
<li>velem</li>
</ul>


<p><strong>Get it</strong>: <code>npm install --save fp-dom</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">fpdom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fp-dom&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">appendtoBody</span> <span class="o">=</span> <span class="nx">fpdom</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">h1</span> <span class="o">=</span> <span class="nx">fpdom</span><span class="p">.</span><span class="nx">elem</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">,</span><span class="s1">&#39;meow&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">appendtoBody</span><span class="p">(</span><span class="nx">h1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/fp-dom/fp-dom.gif" alt="fp-dom" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ineed]]></title>
    <link href="http://nmotw.in/ineed/"/>
    <updated>2016-01-07T16:32:52+00:00</updated>
    <id>http://nmotw.in/ineed</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/ineed">ineed</a></h1>

<blockquote><p>Web scraping and HTML-reprocessing. The easy way.</p></blockquote>

<p><img src="http://nmotw.in/images/ineed/ineed-logo.png" alt="ineed-logo" /></p>

<p><code>ineed</code> allows you collect useful data from web pages using simple and nice API.</p>

<p>It doesn't build and traverse DOM-tree, it operates on sequence of HTML tokens instead. Whole processing is done in one-pass, therefore, it's blazing fast!</p>

<p><strong>Get it:</strong> <code>npm install --save ineed</code></p>

<p><strong>Usage:</strong> <code>ineed.&lt;action&gt;[.&lt;plugin&gt;...].&lt;from*&gt;</code></p>

<p>Where <code>action</code> could be: <code>collect</code> or <code>reprocess</code></p>

<p><code>plugin</code> could be one of: <code>.comments</code> <code>.cssCode</code> <code>.hyperlinks</code> <code>.images</code> <code>.jsCode</code> <code>.scripts</code> <code>.stylesheets</code> <code>.texts</code> <code>.title</code></p>

<p><code>from</code> could be: <code>from</code> or <code>fromHtml</code></p>

<p>P.S: One could write a custom plugin using the <code>.using()</code> method.</p>

<p><strong>Code sample:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">ineed</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ineed&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ineed</span><span class="p">.</span><span class="nx">collect</span><span class="p">.</span><span class="nx">images</span><span class="p">.</span><span class="nx">hyperlinks</span><span class="p">.</span><span class="nx">scripts</span><span class="p">.</span><span class="nx">stylesheets</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="s1">&#39;http://nmotw.in&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">ineed</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ineed&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">ineed</span><span class="p">.</span><span class="nx">collect</span><span class="p">.</span><span class="nx">texts</span><span class="p">.</span><span class="nx">images</span><span class="p">.</span><span class="nx">scripts</span><span class="p">.</span><span class="nx">fromHtml</span><span class="p">(</span><span class="nx">html</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/ineed/ineed.gif" alt="ineed" /></p>

<p>Thanks to <a href="https://twitter.com/nilukini">Ivan Nikulin</a> for this cheeky module.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stack-trace]]></title>
    <link href="http://nmotw.in/stack-trace/"/>
    <updated>2015-12-31T17:47:09+00:00</updated>
    <id>http://nmotw.in/stack-trace</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/stack-trace">stack-trace</a></h1>

<blockquote><p>Get v8 stack traces as an array of CallSite objects.</p></blockquote>

<p><strong>Get it:</strong> <code>npm install --save stack-trace</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">stackTrace</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;stack-trace&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">trace</span> <span class="o">=</span> <span class="nx">stackTrace</span><span class="p">.</span><span class="nx">get</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">stackTrace</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;stack-trace&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">err</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;something went wrong&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">trace</span> <span class="o">=</span> <span class="nx">stackTrace</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And <code>trace</code> would have CallSite objects and each object will have the below methods:</p>

<ul>
<li><strong>getThis</strong>: returns the value of this</li>
<li><strong>getTypeName</strong>: returns the type of this as a string. This is the name of the function stored in the constructor field of this, if available, otherwise the object's [[Class]] internal property.</li>
<li><strong>getFunction</strong>: returns the current function</li>
<li><strong>getFunctionName</strong>: returns the name of the current function, typically its name property. If a name property is not available an attempt will be made to try to infer a name from the function's context.</li>
<li><strong>getMethodName</strong>: returns the name of the property of this or one of its prototypes that holds the current function</li>
<li><strong>getFileName</strong>: if this function was defined in a script returns the name of the script</li>
<li><strong>getLineNumber</strong>: if this function was defined in a script returns the current line number</li>
<li><strong>getColumnNumber</strong>: if this function was defined in a script returns the current column number</li>
<li><strong>getEvalOrigin</strong>: if this function was created using a call to eval returns a CallSite object representing the location where eval was called</li>
<li><strong>isToplevel</strong>: is this a toplevel invocation, that is, is this the global object?</li>
<li><strong>isEval</strong>: does this call take place in code defined by a call to eval?</li>
<li><strong>isNative</strong>: is this call in native V8 code?</li>
<li><strong>isConstructor</strong>: is this a constructor call?</li>
</ul>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/stack-trace/stack-trace.gif" alt="stack-trace" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[is-christmas]]></title>
    <link href="http://nmotw.in/is-christmas/"/>
    <updated>2015-12-24T14:32:35+00:00</updated>
    <id>http://nmotw.in/is-christmas</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/is-christmas">is-christmas</a></h1>

<blockquote><p>ð Is today Christmas? ð</p></blockquote>

<p>Simple fun module that returns <code>true</code> or <code>false</code> if it's Christmas or not.</p>

<p><strong>Get it:</strong></p>

<p><code>$ npm install --save is-christmas</code></p>

<p><code>$ npm install --global is-christmas</code> // for CLI</p>

<p><strong>Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">isChristmas</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;is-christmas&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">isChristmas</span><span class="p">();</span>
</span><span class='line'><span class="c1">//=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>is-christmas --help
</span><span class='line'>
</span><span class='line'>  Usage
</span><span class='line'>    is-christmas
</span><span class='line'>
</span><span class='line'>  Examples
</span><span class='line'>    <span class="nv">$ </span>is-christmas
</span><span class='line'>    <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/is-christmas/is-christmas.gif" alt="is-christmas" /></p>

<p>Thanks to <a href="https://twitter.com/thejameskyle">James Kyle</a> for this fun module for this Christmas ð</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[as]]></title>
    <link href="http://nmotw.in/as/"/>
    <updated>2015-12-17T16:34:55+00:00</updated>
    <id>http://nmotw.in/as</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/as">as</a></h1>

<blockquote><p>Convert easily, back and forth between array and object.</p></blockquote>

<p>A sweet and simple util that help you to convert array to object and vise versa, it also:</p>

<ul>
<li><p>Brings all functional goodness of arrays to objects.</p></li>
<li><p>Brings the flexibility of objects to arrays.</p></li>
<li><p>Works well with a functional programming library.</p></li>
</ul>


<p><strong>Get it</strong>: <code>npm install --save as</code></p>

<p><strong>Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">asArray</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;as/array&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">asArray</span><span class="p">(</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span><span class="p">}</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="c1">// [ {key: &quot;a&quot;, value: 1} </span>
</span><span class='line'><span class="c1">// , {key: &quot;b&quot;, value: 2} </span>
</span><span class='line'><span class="c1">// ] </span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">asObject</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;as/object&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">asObject</span><span class="p">(</span>
</span><span class='line'>  <span class="p">[</span> <span class="p">{</span><span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>  <span class="p">,</span> <span class="p">{</span><span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="mi">2</span><span class="p">}</span>
</span><span class='line'>  <span class="p">]);</span>
</span><span class='line'><span class="c1">// {a: 1, b: 2} </span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/as/as.gif" alt="" /></p>

<p>Thanks for</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dev-time]]></title>
    <link href="http://nmotw.in/dev-time/"/>
    <updated>2015-12-10T15:40:13+00:00</updated>
    <id>http://nmotw.in/dev-time</id>
    <content type="html"><![CDATA[<h1><a href="https://github.com/SamVerschueren/dev-time">dev-time</a></h1>

<blockquote><p>Get the current local time of a GitHub user.</p></blockquote>

<p>Ever wanted to ping someone on github and were wondering what time zone does the dev is on?</p>

<p><code>dev-time</code> helps you with getting the local time of GitHub user.</p>

<p>How does it do that? Well, it gets the latest commit of the user and get the time stamp from there and then find the time.</p>

<p><strong>Get it:</strong> <code>npm install --save dev-time</code></p>

<p><strong>For CLI:</strong> <code>npm install --global dev-time-cli</code></p>

<p><strong>Sample usage API:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">devTime</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;dev-time&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">devTime</span><span class="p">(</span><span class="s1">&#39;SamVerschueren&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">time</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">time</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//=&gt; &#39;2015-12-10T21:18:34+05:30&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>On CLI:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>dev-time --help
</span><span class='line'>
</span><span class='line'>  Usage
</span><span class='line'>    <span class="nv">$ </span>dev-time &lt;user&gt; &lt;user2&gt; ...
</span><span class='line'>
</span><span class='line'>  Options
</span><span class='line'>    -v, --verbose  Show UTC offset.
</span><span class='line'>    --format       The moment format of the output. <span class="o">[</span>Default: HH:mm - D MMM. YYYY<span class="o">]</span>
</span><span class='line'>    --token        The GitHub authentication token.
</span><span class='line'>
</span><span class='line'>  Examples
</span><span class='line'>    <span class="nv">$ </span>dev-time SamVerschueren
</span><span class='line'>    19:47 - 8 Dec. 2015
</span><span class='line'>
</span><span class='line'>    <span class="nv">$ </span>dev-time SamVerschueren sindresorhus
</span><span class='line'>    SamVerschueren
</span><span class='line'>      19:47 - 8 Dec. 2015
</span><span class='line'>    sindresorhus
</span><span class='line'>      18:47 - 8 Dec. 2015
</span><span class='line'>
</span><span class='line'>    <span class="nv">$ </span>dev-time SamVerschueren -v
</span><span class='line'>    19:47 - 8 Dec. 2015 - UTC+1
</span><span class='line'>
</span><span class='line'>    <span class="nv">$ </span>dev-time SamVerschueren --format DD-MM-YYYY
</span><span class='line'>    07-12-2015
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/dev-time/dev-time.gif" alt="dev-time" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ambi]]></title>
    <link href="http://nmotw.in/ambi/"/>
    <updated>2015-12-03T15:21:30+00:00</updated>
    <id>http://nmotw.in/ambi</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/ambi">ambi</a></h1>

<blockquote><p>Execute a function ambidextrously.</p></blockquote>

<p><code>ambi</code> normalizes the differences between synchronous and asynchronous functions! That is treating synchronous functions as asynchronous functions.</p>

<p><strong>Get it:</strong> <code>$ npm install --save ambi</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">ambi</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ambi&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">child_process</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;child_process&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ambi</span><span class="p">(</span><span class="nx">child_process</span><span class="p">.</span><span class="nx">execSync</span><span class="p">,</span> <span class="s1">&#39;pwd&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">encoding</span><span class="o">:</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">));</span> <span class="c1">// Async </span>
</span><span class='line'>
</span><span class='line'><span class="nx">ambi</span><span class="p">(</span><span class="nx">child_process</span><span class="p">.</span><span class="nx">exec</span><span class="p">,</span> <span class="s1">&#39;pwd&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">encoding</span><span class="o">:</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">));</span> <span class="c1">// Sync</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/ambi/ambi.gif" alt="ambi" /></p>

<p>Thanks to <a href="http://balupton.com/">Benjamin Lupton</a> for this module.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[npmlog]]></title>
    <link href="http://nmotw.in/npmlog/"/>
    <updated>2015-11-26T14:07:54+00:00</updated>
    <id>http://nmotw.in/npmlog</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/npmlog">npmlog</a></h1>

<blockquote><p>logger for npm</p></blockquote>

<p><code>npmlog</code> is a simple logger that <code>npm</code> uses to log it's messages, this module provides custom levels and colored output.</p>

<p>By default, logs are written to <code>stderr</code>, to send log messages to outputs other than streams you can use <code>log.stream</code> member, or you can just listen to the events that it emits.</p>

<p><strong>Get it:</strong> : <code>npm install --save npmlog</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">log</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;npmlog&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// additional stuff ---------------------------+</span>
</span><span class='line'><span class="c1">// message ----------+                         |</span>
</span><span class='line'><span class="c1">// prefix ----+      |                         |</span>
</span><span class='line'><span class="c1">// level -+   |      |                         |</span>
</span><span class='line'><span class="c1">//        v   v      v                         v</span>
</span><span class='line'>    <span class="nx">log</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s1">&#39;fyi&#39;</span><span class="p">,</span> <span class="s1">&#39;I &lt;3 nmotw: %j&#39;</span><span class="p">,</span> <span class="nx">node_modules</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>levels:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="nx">log</span><span class="p">.</span><span class="nx">levels</span>
</span><span class='line'><span class="p">{</span> <span class="nx">silly</span><span class="o">:</span> <span class="o">-</span><span class="kc">Infinity</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">verbose</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">info</span><span class="o">:</span> <span class="mi">2000</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">http</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">warn</span><span class="o">:</span> <span class="mi">4000</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">error</span><span class="o">:</span> <span class="mi">5000</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">silent</span><span class="o">:</span> <span class="kc">Infinity</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">log</span><span class="p">.</span><span class="nx">disp</span>
</span><span class='line'><span class="p">{</span> <span class="nx">silly</span><span class="o">:</span> <span class="s1">&#39;sill&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">verbose</span><span class="o">:</span> <span class="s1">&#39;verb&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">info</span><span class="o">:</span> <span class="s1">&#39;info&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">http</span><span class="o">:</span> <span class="s1">&#39;http&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">warn</span><span class="o">:</span> <span class="s1">&#39;WARN&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">error</span><span class="o">:</span> <span class="s1">&#39;ERR!&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">silent</span><span class="o">:</span> <span class="s1">&#39;silent&#39;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/npmlog/npmlog.gif" alt="npmlog" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[notie]]></title>
    <link href="http://nmotw.in/notie/"/>
    <updated>2015-11-19T09:56:38+00:00</updated>
    <id>http://nmotw.in/notie</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/notie">notie</a></h1>

<blockquote><p>A simple notification plugin.</p></blockquote>

<p><code>notie</code> - A clean and simple notification plugin with alert/growl style, has no dependencies, help us to take an input,
confirmation or alter the users in a more appealing manner.</p>

<p>It's uses material design, you can override or add styling in a separate <code>.css</code> file.</p>

<p><strong>Get it:</strong> <code>npm install --save notie</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">notie</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;notie);</span>
</span><span class='line'>
</span><span class='line'><span class="s1">notie.alert(style_number, &#39;</span><span class="nx">message</span><span class="s1">&#39;, time_in_seconds);</span>
</span><span class='line'>
</span><span class='line'><span class="s1">notie.confirm(&#39;</span><span class="nx">Title</span> <span class="nx">text</span><span class="s1">&#39;, &#39;</span><span class="nx">Yes</span> <span class="nx">button</span> <span class="nx">text</span><span class="s1">&#39;, &#39;</span><span class="nx">No</span> <span class="nx">button</span> <span class="nx">text</span><span class="s1">&#39;, yes_callback);</span>
</span><span class='line'>
</span><span class='line'><span class="s1">notie.input(&#39;</span><span class="nx">Title</span> <span class="nx">text</span><span class="s1">&#39;, &#39;</span><span class="nx">Submit</span> <span class="nx">button</span> <span class="nx">text</span><span class="s1">&#39;, &#39;</span><span class="nx">Cancel</span> <span class="nx">button</span> <span class="nx">text</span><span class="s1">&#39;, &#39;</span><span class="nx">type</span><span class="s1">&#39;, &#39;</span><span class="nx">placeholder</span><span class="s1">&#39;, submit_callback, &#39;</span><span class="nx">Optional</span> <span class="nx">pre</span><span class="o">-</span><span class="nx">filled</span> <span class="nx">value</span><span class="err">&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">notie</span><span class="p">.</span><span class="nx">input</span><span class="p">(</span><span class="s1">&#39;What city do you live in?&#39;</span><span class="p">,</span> <span class="s1">&#39;Submit&#39;</span><span class="p">,</span> <span class="s1">&#39;Cancel&#39;</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">,</span> <span class="s1">&#39;Enter your city:&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value_entered</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">notie</span><span class="p">.</span><span class="nx">alert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;You entered: &#39;</span> <span class="o">+</span> <span class="nx">value_entered</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="s1">&#39;New York&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>P.S: <code>style_number</code> -> <code>{1,2,3,4}</code> &lt;=> <code>{Success, Warning, Error, Information}</code></p>

<p><strong>GIF FTW:</strong></p>

<p><img src="http://nmotw.in/images/notie/notie.gif" alt="notie" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[debounce]]></title>
    <link href="http://nmotw.in/debounce/"/>
    <updated>2015-11-12T16:54:27+00:00</updated>
    <id>http://nmotw.in/debounce</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/debounce">debounce</a></h1>

<blockquote><p>debounce a function.</p></blockquote>

<p>Creates and returns a new debounced version of the passed function that will postpone its execution until after wait milliseconds have elapsed since the last time it was invoked.</p>

<p><strong>Get it:</strong> <code>npm install --save debounce</code></p>

<p><strong>API:</strong> <code>debounce(fn, wait, [ immediate || false ])</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">debounce</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;debounce&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">onresize</span> <span class="o">=</span> <span class="nx">debounce</span><span class="p">(</span><span class="nx">resize</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">resize</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;height&#39;</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;width&#39;</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/debounce/debounce.gif" alt="debounce.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[prettysize]]></title>
    <link href="http://nmotw.in/prettysize/"/>
    <updated>2015-11-05T13:01:20+00:00</updated>
    <id>http://nmotw.in/prettysize</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/prettysize">prettysize</a></p>

<blockquote><p>Convert bytes to other sizes for prettier logging.</p></blockquote>

<p>In just 45 lines of code, this cheeky module by <a href="https://twitter.com/davglass">@davlgass</a> makes it easy to humanize file sizes.</p>

<p><strong>Get it:</strong> <code>npm install --save prettysize</code></p>

<p><strong>Sample usage:</strong></p>

<div id="prettysize">
var pretty = require('prettysize');
var str = pretty(123456789);
</div>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/prettysize/prettysize.gif" alt="prettysize" /></p>

<script src="https://embed.tonicdev.com" data-element-id="prettysize"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sentiment]]></title>
    <link href="http://nmotw.in/sentiment/"/>
    <updated>2015-10-29T13:17:29+00:00</updated>
    <id>http://nmotw.in/sentiment</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/sentiment">sentiment</a></h1>

<blockquote><p>AFINN-based sentiment analysis.</p></blockquote>

<p><code>Sentiment</code> uses <a href="http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010">AFINN-111</a> wordlist to perform <a href="http://en.wikipedia.org/wiki/Sentiment_analysis">sentiment analysis</a> on arbitrary blocks of input text.</p>

<p>Sentiment provides serveral things:</p>

<ul>
<li>Performance.</li>
<li>The ability to append and overwrite word / value pairs from the AFINN wordlist.</li>
<li>A build process that makes updating sentiment to future versions of the AFINN word list trivial.</li>
</ul>


<p><strong>Get it:</strong> <code>npm install --save sentiment</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">sentiment</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;sentiment&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">sentiment</span><span class="p">(</span><span class="s1">&#39;Cats are stupid&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">{</span> <span class="nx">score</span><span class="o">:</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">comparative</span><span class="o">:</span> <span class="o">-</span><span class="mf">0.6666666666666666</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">tokens</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;cats&#39;</span><span class="p">,</span> <span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;stupid&#39;</span> <span class="p">],</span>
</span><span class='line'>  <span class="nx">words</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;stupid&#39;</span> <span class="p">],</span>
</span><span class='line'>  <span class="nx">positive</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'>  <span class="nx">negative</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;stupid&#39;</span> <span class="p">]</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">sentiment</span><span class="p">(</span><span class="s1">&#39;Cats are cool&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">{</span> <span class="nx">score</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">comparative</span><span class="o">:</span> <span class="mf">0.3333333333333333</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">tokens</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;cats&#39;</span><span class="p">,</span> <span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;cool&#39;</span> <span class="p">],</span>
</span><span class='line'>  <span class="nx">words</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;cool&#39;</span> <span class="p">],</span>
</span><span class='line'>  <span class="nx">positive</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;cool&#39;</span> <span class="p">],</span>
</span><span class='line'>  <span class="nx">negative</span><span class="o">:</span> <span class="p">[]</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">sentiment</span><span class="p">(</span><span class="s1">&#39;Cats are cool&#39;</span><span class="p">,{</span><span class="s1">&#39;cats&#39;</span><span class="o">:</span><span class="mi">5</span><span class="p">,</span><span class="s1">&#39;cool&#39;</span><span class="o">:</span><span class="mi">10</span><span class="p">});</span>
</span><span class='line'><span class="p">{</span> <span class="nx">score</span><span class="o">:</span> <span class="mi">15</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">comparative</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">tokens</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;cats&#39;</span><span class="p">,</span> <span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;cool&#39;</span> <span class="p">],</span>
</span><span class='line'>  <span class="nx">words</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;cool&#39;</span><span class="p">,</span> <span class="s1">&#39;cats&#39;</span> <span class="p">],</span>
</span><span class='line'>  <span class="nx">positive</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;cool&#39;</span><span class="p">,</span> <span class="s1">&#39;cats&#39;</span> <span class="p">],</span>
</span><span class='line'>  <span class="nx">negative</span><span class="o">:</span> <span class="p">[]</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/sentiment/sentiment.gif" alt="sentiment.gif" /></p>

<p>Thanks to <a href="https://twitter.com/thisandagain">Andrew Sliwinski</a> for this crazy module!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hide-secrets]]></title>
    <link href="http://nmotw.in/hide-secrets/"/>
    <updated>2015-10-22T14:09:43+00:00</updated>
    <id>http://nmotw.in/hide-secrets</id>
    <content type="html"><![CDATA[<script src="https://embed.tonicdev.com" data-element-id="hide-secrets"></script>


<h1><a href="https://www.npmjs.com/package/hide-secrets">hide-secrets</a></h1>

<blockquote><p>hide certain restricted fields whiling logging objects.</p></blockquote>

<p>This module obfuscated any of <code>password</code>, <code>pass</code>, <code>token</code>, <code>auth</code>, <code>secret</code> or <code>passphrase</code> attribute's value to <code>'[SECRET]'</code>.
Very useful when logging an object that has sensitive data!</p>

<p><strong>Install it:</strong> <code>npm install --save hide-secrets</code></p>

<p><strong>Sample usage:</strong></p>

<div id="hide-secrets">
var hide = require('hide-secrets')
 
var obj = {
  innerObject: {
    password: 'abc123',
    email: 'xyz@nmotw.in',
    token: 'my-secret-token'
  },
  auth: '' // empty strings are left empty. 
}
 
hide(obj)
</div>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/hide-secrets/hide-secrets.gif" alt="hide-secrets" /></p>

<p>Thanks to <a href="https://twitter.com/benjamincoe">Benjamin Coe</a> for helping us hide our secrets ;)</p>
]]></content>
  </entry>
  
</feed>
