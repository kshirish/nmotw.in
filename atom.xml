<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NMOTW]]></title>
  <link href="http://nmotw.in/atom.xml" rel="self"/>
  <link href="http://nmotw.in/"/>
  <updated>2015-04-23T15:57:18+00:00</updated>
  <id>http://nmotw.in/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[exenv]]></title>
    <link href="http://nmotw.in/exenv/"/>
    <updated>2015-04-23T15:44:08+00:00</updated>
    <id>http://nmotw.in/exenv</id>
    <content type="html"><![CDATA[<p><a href="http://npm.im/exenv">exenv</a></p>

<blockquote><p>React&#8217;s ExecutionEnvironment module extracted.</p></blockquote>

<p>Many modules and components out there in the wild, uses React&#8217;s private <code>ExecutionEnvironment</code> lib for feature detection, like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">canUseDOM</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react/lib/ExecutionEnvironment&#39;</span><span class="p">).</span><span class="nx">canUseDOM</span><span class="p">;</span> <span class="c1">// BAD</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is not a good practice as private libs are prone to modification or deletion, so <a href="http://www.thinkmill.com.au">Jed Watson</a> has created
<code>exenv</code> for us.</p>

<p>P.S: <code>isInWorker</code> has been left out as it&#8217;s very specific to react.</p>

<p><strong>Install it:</strong> <code>npm install --save exenv</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">exenv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;exenv&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">exenv</span><span class="p">);</span>
</span><span class='line'><span class="c1">//Object {canUseDOM: true, canUseWorkers: true, canUseEventListeners: true, canUseViewport: true}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/exenv/exenv.gif" alt="exenv" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[logdown]]></title>
    <link href="http://nmotw.in/logdown/"/>
    <updated>2015-04-16T12:37:03+00:00</updated>
    <id>http://nmotw.in/logdown</id>
    <content type="html"><![CDATA[<p><a href="http://npm.im/logdown">logdown</a></p>

<blockquote><p>Debug utility with markdown support that runs on browser and server.</p></blockquote>

<p>This module lets you to have markdown syntax in your debug logs! It had <code>['log', 'info', 'warn', 'error']</code> as it&#8217;s logging levels.</p>

<p>One can also prefix the log message, it has support for various terminals <code>/^screen|^xterm|^vt100|color|ansi|cygwin|linux/</code> and also runs
in the browser env.</p>

<p><strong>Install it:</strong> <code>npm install --save logdown</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Logdown</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;logdown&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">debug</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Logdown</span><span class="p">({</span> <span class="nx">prefix</span><span class="o">:</span> <span class="s1">&#39;meow&#39;</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">debug</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;lorem *ipsum*&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">debug</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s1">&#39;I can haz _info_&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">debug</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s1">&#39;shall I `highlight` your code?&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW:</strong></p>

<p><img src="http://nmotw.in/images/logdown/logdown.gif" alt="logdown" /></p>

<p>Thanks to <a href="http://caiogondim.com">Caio Gondim</a> for logdown! (:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[require-times]]></title>
    <link href="http://nmotw.in/require-times/"/>
    <updated>2015-04-09T14:40:22+00:00</updated>
    <id>http://nmotw.in/require-times</id>
    <content type="html"><![CDATA[<h1><a href="http://npm.im/require-times">require-times</a></h1>

<blockquote><p>Find out how long require calls take in your program.</p></blockquote>

<p>This is cheeky module from <a href="http://maxogden.com/">Max Ogden</a> tap into <code>require.extensions['.js']</code> and lets you know the time consumed by
the require calls in your code.</p>

<p><strong>Install it:</strong> <code>npm install require-times</code></p>

<p><strong>Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">rt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;require-times&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">rt</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// hundreds on require statments ;)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">rt</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span> <span class="c1">// Will spit the time consumed to stdout.</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Example:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">rt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;require-times&#39;</span><span class="p">)();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">rt</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;require-times&#39;</span><span class="p">);</span> <span class="c1">// Dog fooding ;)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">rt</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Output =&gt; total: 9647ms</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/require-times/require-times.gif" alt="require-times" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[line-numbers]]></title>
    <link href="http://nmotw.in/line-numbers/"/>
    <updated>2015-04-02T11:40:30+00:00</updated>
    <id>http://nmotw.in/line-numbers</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/line-numbers">line-numbers</a></h1>

<blockquote><p>Add line numbers to a string.</p></blockquote>

<p>A humble module that will add line number to a given string! Mostly useful for text editor and displaying some code snippet.</p>

<p><strong>Install it:</strong> <code>$ npm install --save line-numbers</code></p>

<p><strong>Simple usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">lns</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;line-numbers&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">code</span> <span class="o">=</span> <span class="err">`</span><span class="kd">function</span> <span class="nx">meow</span><span class="p">(</span><span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">cb</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;CB is a must!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">cb</span><span class="p">(</span><span class="s2">&quot;meow&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="err">`</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">lns</span><span class="p">(</span><span class="nx">code</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Would log:</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> 1 | function meow(cb) { </span>
</span><span class='line'><span class="cm"> 2 |   if(!cb) throw new Error(&quot;CB is a must!&quot;);</span>
</span><span class='line'><span class="cm"> 3 |   cb(&quot;meow&quot;);</span>
</span><span class='line'><span class="cm"> 4 | }</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>P.S: You can also pass in options like: <code>before</code>, <code>number</code>, <code>width</code>, <code>after</code> and <code>line</code> (They are self explanatory?)</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/line-numbers/line-numbers.gif" alt="line-numbers" /></p>

<p>Thanks to Simon Lydell for <code>line-numbers</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cssom]]></title>
    <link href="http://nmotw.in/cssom/"/>
    <updated>2015-03-26T13:35:30+00:00</updated>
    <id>http://nmotw.in/cssom</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/cssom">cssom</a></h1>

<blockquote><p>CSS Object Model implementation and CSS parser.</p></blockquote>

<p><code>cssom</code> is parser written in pure javascript, it also has partially implemented of <a href="http://dev.w3.org/csswg/cssom/">CSS Object Model</a>, works across node/io.js and modren browsers.</p>

<p><strong>Install it:</strong> <code>npm install cssom --save</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="nx">cssom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;cssom&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span> <span class="nx">CSSStyleDeclaration</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">CSSStyleDeclaration</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">CSSRule</span><span class="o">:</span>
</span><span class='line'>   <span class="p">{</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">CSSRule</span><span class="p">]</span>
</span><span class='line'>     <span class="nx">STYLE_RULE</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>     <span class="nx">IMPORT_RULE</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>     <span class="nx">MEDIA_RULE</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>     <span class="nx">FONT_FACE_RULE</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>     <span class="nx">PAGE_RULE</span><span class="o">:</span> <span class="mi">6</span><span class="p">,</span>
</span><span class='line'>     <span class="nx">WEBKIT_KEYFRAMES_RULE</span><span class="o">:</span> <span class="mi">8</span><span class="p">,</span>
</span><span class='line'>     <span class="nx">WEBKIT_KEYFRAME_RULE</span><span class="o">:</span> <span class="mi">9</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">CSSStyleRule</span><span class="o">:</span> <span class="p">{</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">CSSStyleRule</span><span class="p">]</span> <span class="nx">parse</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">]</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">MediaList</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">MediaList</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">CSSMediaRule</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">CSSMediaRule</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">CSSImportRule</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">CSSImportRule</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">CSSFontFaceRule</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">CSSFontFaceRule</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">StyleSheet</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">StyleSheet</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">CSSStyleSheet</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">CSSStyleSheet</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">CSSKeyframesRule</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">CSSKeyframesRule</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">CSSKeyframeRule</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">CSSKeyframeRule</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">MatcherList</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">MatcherList</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">CSSDocumentRule</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">CSSDocumentRule</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">CSSValue</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">CSSValue</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">CSSValueExpression</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">CSSValueExpression</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">parse</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">parse</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">clone</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">clone</span><span class="p">]</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">cssom</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">&#39;.main{display:flex}&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span> <span class="nx">parentStyleSheet</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">cssRules</span><span class="o">:</span>
</span><span class='line'>   <span class="p">[</span> <span class="p">{</span> <span class="nx">parentRule</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>       <span class="nx">parentStyleSheet</span><span class="o">:</span> <span class="p">[</span><span class="nx">Circular</span><span class="p">],</span>
</span><span class='line'>       <span class="nx">selectorText</span><span class="o">:</span> <span class="s1">&#39;.main&#39;</span><span class="p">,</span>
</span><span class='line'>       <span class="nx">style</span><span class="o">:</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span>
</span><span class='line'>       <span class="nx">__starts</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>       <span class="nx">__ends</span><span class="o">:</span> <span class="mi">19</span> <span class="p">}</span> <span class="p">]</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thanks to <a href="http://n12v.com/">Nikita Vasilyev</a> for this early implementation of <code>cssom</code> (:</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/cssom/cssom.gif" alt="cssom" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[did-you-mean]]></title>
    <link href="http://nmotw.in/did-you-mean/"/>
    <updated>2015-03-19T12:11:21+00:00</updated>
    <id>http://nmotw.in/did-you-mean</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/did-you-mean">did-you-mean</a></h1>

<blockquote><p>Fuzzy match a command from a list (typo-safety)</p></blockquote>

<p>This module does a Fuzzy match a word from your list of commands or keywords from node.js/io.js to provide a friendly typo-safe human prompt.</p>

<p><strong>Install it:</strong> <code>npm install --save did-you-mean</code></p>

<p><strong>API:</strong></p>

<ul>
<li><p>get -> Get the closest match.</p></li>
<li><p>setThreshold(3) -> Set the threshold (the maximum Levenshtein distance)</p></li>
<li><p>list(&#8216;key&#8217;) -> List all matches.</p></li>
<li><p>ignoreCase() -> Set ignore case.</p></li>
<li><p>matchCase() -> Set match case.</p></li>
<li><p>add(&#8216;key1&#8217;,&#8217;key2&#8217;,&#8230;); -> Add more values.</p></li>
</ul>


<p><strong>Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Matcher</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;did-you-mean&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Matcher</span><span class="p">(</span><span class="s1">&#39;init install update upgrade npm brew apt-get&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">m</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;upgarde&#39;</span><span class="p">);</span> <span class="c1">// &quot;upgrade&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">m</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;brwe&#39;</span><span class="p">);</span> <span class="c1">// &quot;brew&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">m</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;atp-get&#39;</span><span class="p">);</span> <span class="c1">// &quot;apt-get&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">m</span><span class="p">.</span><span class="nx">values</span><span class="p">;</span> <span class="c1">// [&quot;npm&quot;, &quot;brew&quot;, &quot;upgrade&quot;, &quot;update&quot;, &quot;apt-get&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">m</span><span class="p">.</span><span class="nx">list</span><span class="p">(</span><span class="s1">&#39;upgarde&#39;</span><span class="p">);</span> <span class="c1">// {distance: 2, value: &quot;upgrade&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/did-you-mean/did-you-mean.gif" alt="did-you-mean" /></p>

<p>Thanks to Boris Okunskiy for bringing <code>did-you-mean</code> to web and CLI.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[confirm-simple]]></title>
    <link href="http://nmotw.in/confirm-simple/"/>
    <updated>2015-03-12T15:24:10+00:00</updated>
    <id>http://nmotw.in/confirm-simple</id>
    <content type="html"><![CDATA[<h1><a href="http://npm.im/confirm-simple">confirm-simple</a></h1>

<blockquote><p>A simple command-line tool to confirm.</p></blockquote>

<p>If you have written CLI apps, you would have for sure come across a senario of taking an action based on the users choice.</p>

<p><code>confirm-simple</code> as the name says it&#8217;s a simple to use util that would help you to confirm users choice with ease.</p>

<p><strong>Install it:</strong> <code>npm install --save confirm-simple</code></p>

<p><strong>API and simple usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">confirm</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;confirm-simple&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">confirm</span><span class="p">(</span><span class="s1">&#39;Do you accept the EULA?&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;yes&#39;</span><span class="p">,</span> <span class="s1">&#39;no&#39;</span><span class="p">]</span> <span class="p">,</span><span class="kd">function</span> <span class="p">(</span><span class="nx">yes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">yes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Good for you!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Sorry you wont get to use the software&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/confirm-simple/confirm-simple.gif" alt="" /></p>

<p>Thanks to YouBao Nong for <code>confirm-simple</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dompurify]]></title>
    <link href="http://nmotw.in/dompurify/"/>
    <updated>2015-03-05T13:17:23+00:00</updated>
    <id>http://nmotw.in/dompurify</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/dompurify">dompurify</a></h1>

<blockquote><p>Super-fast, uber-tolerant XSS sanitizer for HTML, MathML and SVG!</p></blockquote>

<p>DOMPurify sanitizes HTML and prevents XSS attacks.</p>

<p>|dirty HTML |  => |DOMPurify.sanitize |  => | Clean and safe HTML |</p>

<p>The faster your browser, the faster DOMPurify will be ;)</p>

<p><strong>Install it:</strong>  <code>npm install --save dompurify</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">DOMpurify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;dompurify);</span>
</span><span class='line'>
</span><span class='line'><span class="s1">DOMPurify.sanitize(&#39;</span><span class="o">&lt;</span><span class="nx">img</span> <span class="nx">src</span><span class="o">=</span><span class="nx">x</span> <span class="nx">onerror</span><span class="o">=</span><span class="nx">alert</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="c1">//&gt;&#39;); // becomes &lt;img src=&quot;x&quot;&gt; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">DOMPurify</span><span class="p">.</span><span class="nx">sanitize</span><span class="p">(</span><span class="s1">&#39;&lt;svg&gt;&lt;g/onload=alert(2)//&lt;p&gt;&#39;</span><span class="p">);</span> <span class="c1">// becomes &lt;svg&gt;&lt;g&gt;&lt;/g&gt;&lt;/svg&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s configurable: <code>var config = { ALLOWED_TAGS: ['p', '#text'], KEEP_CONTENT: false };</code> and <code>DOMPurify.sanitize(str, config)</code></p>

<p>We can also use <code>hooks</code>:</p>

<ul>
<li><p>beforeSantitizeElements</p></li>
<li><p>afterSantitizeElements</p></li>
<li><p>beforeSantitizeAttributes</p></li>
<li><p>afterSantitizeAttributes</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">DOMPurify</span><span class="p">.</span><span class="nx">addHook</span><span class="p">(</span><span class="s1">&#39;beforeSantitizeElements&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">currentNode</span><span class="p">,</span> <span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Play with currentNode.</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">currentNode</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/dompurify/dompurify.gif" alt="dompurify" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dom-event]]></title>
    <link href="http://nmotw.in/dom-event/"/>
    <updated>2015-02-26T12:48:25+00:00</updated>
    <id>http://nmotw.in/dom-event</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/dom-event">dom-event</a></h1>

<blockquote><p>Add/remove DOM events</p></blockquote>

<p>Sweet and simple module that helps you to attach and remove events to a DOM element with ease and cross browser compliance all in just 15 lines of code ;)</p>

<p><strong>Add event:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">on</span> <span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">event</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="nx">capture</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">!</span><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">event</span> <span class="o">=</span> <span class="s1">&#39;on&#39;</span> <span class="o">+</span> <span class="nx">event</span><span class="p">);</span>
</span><span class='line'>  <span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span> <span class="o">||</span> <span class="nx">element</span><span class="p">.</span><span class="nx">attachEvent</span><span class="p">)(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="nx">capture</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">callback</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Remove event:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">off</span> <span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">event</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="nx">capture</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">!</span><span class="nx">element</span><span class="p">.</span><span class="nx">removeEventListener</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">event</span> <span class="o">=</span> <span class="s1">&#39;on&#39;</span> <span class="o">+</span> <span class="nx">event</span><span class="p">);</span>
</span><span class='line'>  <span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">removeEventListener</span> <span class="o">||</span> <span class="nx">element</span><span class="p">.</span><span class="nx">detachEvent</span><span class="p">)(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="nx">capture</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">callback</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Install it:</strong> <code>npm install dom-event</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">on</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;dom-event&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">off</span> <span class="o">=</span> <span class="nx">on</span><span class="p">.</span><span class="nx">off</span><span class="p">;</span> <span class="c1">// :)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">on</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="nx">hello</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">hello</span><span class="p">()</span> <span class="p">{</span><span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;hello&quot;</span><span class="p">);}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">off</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="nx">hello</span><span class="p">);</span> <span class="c1">// No alerts :)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/dom-event/dom-event.gif" alt="dom-event" /></p>

<p>P.S: All Web realted modules would need help from <a href="http://browserify.org/">browserify</a> or related tools to run on the web.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sentencer]]></title>
    <link href="http://nmotw.in/sentencer/"/>
    <updated>2015-02-19T13:45:03+00:00</updated>
    <id>http://nmotw.in/sentencer</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/sentencer">sentencer</a></h1>

<blockquote><p>Templating engine for madlibs-style sentence generating.</p></blockquote>

<p>Create crazy sentences with <code>nouns</code>, <code>adjectives</code> and your own randomness!</p>

<p><code>Sentencer</code> was written for and powers <a href="http://metaphorpsum.com">Metaphorpsum</a>. The noun and adjective lists for form -> <a href="http://www.ashley-bovan.co.uk/words/partsofspeech.html">Word Lists for Writers</a>.</p>

<p><strong>Install it:</strong> <code>npm install sentencer --save</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">Sentencer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;sentencer&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&quot; A  jumped over &quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Sentencer</span><span class="p">.</span><span class="nx">make</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span> <span class="c1">//&#39; A agreement jumped over a sprightful&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Sentencer</span><span class="p">.</span><span class="nx">make</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span> <span class="c1">// &#39; A shrine jumped over a wordless&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">str</span> <span class="o">=</span> <span class="s2">&quot;  jumped over &quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Sentencer</span><span class="p">.</span><span class="nx">make</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span> <span class="c1">// &#39; an instruction jumped over a scabrous&#39;</span>
</span><span class='line'><span class="nx">Sentencer</span><span class="p">.</span><span class="nx">make</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span> <span class="c1">// &#39; a thistle jumped over a shapely&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Define custom actions:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Sentencer</span><span class="p">.</span><span class="nx">configure</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">rand</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span>  <span class="o">*</span> <span class="mi">10</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Sentencer</span><span class="p">.</span><span class="nx">make</span><span class="p">(</span><span class="s2">&quot;I like &quot;</span><span class="p">);</span> <span class="c1">// &#39;I like 7&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW:</strong></p>

<p><img src="http://nmotw.in/images/sentencer/sentencer.gif" alt="sentencer" /></p>

<p>Thanks to <a href="https://twitter.com/kylestetz">@kylestetz</a> for this fun module! (:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dehumanize-date]]></title>
    <link href="http://nmotw.in/dehumanize-date/"/>
    <updated>2015-02-12T12:27:21+00:00</updated>
    <id>http://nmotw.in/dehumanize-date</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/dehumanize-date">dehumanize-date</a></h1>

<blockquote><p>Parse dates in all the formats humans like to use.</p></blockquote>

<p>Yes, it dehumanize dates will almost all the formates humans like to use, those invovle:</p>

<ul>
<li>today/tomorrow/yesterday</li>
<li>next/this/last Wednesday</li>
<li>12th January</li>
<li>12th January 1950</li>
<li>09-08-2008</li>
<li>2008-08-09</li>
</ul>


<p>And returns a computer friendly date of the format: <code>yyyy-dd-mm</code></p>

<p>The heart of the module consists of the below regular expressions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">NUMBER</span>              <span class="o">=</span> <span class="sr">/^[0-9]+$/</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">NUMBER_WITH_ORDINAL</span> <span class="o">=</span> <span class="sr">/^([0-9]+)(st|nd|rd|th)?$/</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">NUMBER_DATE</span>         <span class="o">=</span> <span class="sr">/^(3[0-1]|[1-2][0-9]|0?[1-9])[,\|\\\/\-\. ]+(1[0-2]|0?[1-9])[,\|\\\/\-\. ]+([0-9]{4})$/</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">NUMBER_DATE_USA</span>     <span class="o">=</span> <span class="sr">/^(1[0-2]|0?[1-9])[,\|\\\/\-\. ]+(3[0-1]|[1-2][0-9]|0?[1-9])[,\|\\\/\-\. ]+([0-9]{4})$/</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">NUMBER_DATE_SHORT_YEAR</span>         <span class="o">=</span> <span class="sr">/^(3[0-1]|[1-2][0-9]|0?[1-9])[,\|\\\/\-\. ]+(1[0-2]|0?[1-9])[,\|\\\/\-\. ]+([0-9]{2})$/</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">NUMBER_DATE_SHORT_YEAR_USA</span>     <span class="o">=</span> <span class="sr">/^(1[0-2]|0?[1-9])[,\|\\\/\-\. ]+(3[0-1]|[1-2][0-9]|0?[1-9])[,\|\\\/\-\. ]+([0-9]{2})$/</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ISO_8601_DATE</span>       <span class="o">=</span> <span class="sr">/^([0-9]{4})-?(1[0-2]|0?[1-9])-?(3[0-1]|[1-2][0-9]|0?[1-9])$/</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">dehumanizeDate</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;dehumanize-date&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">dehumanizeDate</span>
</span><span class='line'><span class="p">{</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">parse</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">parseNearbyDays</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">parseNearbyDays</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">parseLastThisNext</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">parseLastThisNext</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">parseNumberDate</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">parseNumberDate</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">parseNumberDateShortYear</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">parseNumberDateShortYear</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">parseWordyDate</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">parseWordyDate</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">monthFromName</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">monthFromName</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">date</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">date</span><span class="p">]</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">dehumanizeDate</span><span class="p">(</span><span class="s2">&quot;today&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s1">&#39;2015-02-12&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">dehumanizeDate</span><span class="p">(</span><span class="s2">&quot;tommorrow&quot;</span><span class="p">)</span> <span class="c1">// In case it does not match any.</span>
</span><span class='line'><span class="kc">null</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">dehumanizeDate</span><span class="p">(</span><span class="s2">&quot;tomorrow&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s1">&#39;2015-02-13&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">dehumanizeDate</span><span class="p">(</span><span class="s2">&quot;yesterday&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s1">&#39;2015-02-11&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">dehumanizeDate</span><span class="p">(</span><span class="s2">&quot;1st January&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s1">&#39;2015-01-01&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">dehumanizeDate</span><span class="p">(</span><span class="s2">&quot;1st January 1997&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s1">&#39;1997-01-01&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">dehumanizeDate</span><span class="p">(</span><span class="s2">&quot;09-09-2009&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s1">&#39;2009-09-09&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">dehumanizeDate</span><span class="p">(</span><span class="s2">&quot;2009-09-09&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s1">&#39;2009-09-09&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/dehumanize-date/dehumanize-date.gif" alt="dehumanize-date" /></p>

<p>Thanks for <a href="http://www.jepso.com">Forbes Lindesay</a> for dehumanizing dates ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[objectmap]]></title>
    <link href="http://nmotw.in/objectmap/"/>
    <updated>2015-02-05T14:03:17+00:00</updated>
    <id>http://nmotw.in/objectmap</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/mapobject">mapobject</a></h1>

<blockquote><p>Use a ES6 map, like an object.</p></blockquote>

<p>This module is one of those rare hidden gems in npm, it&#8217;s already a year old, it makes uses of ES6 reflect API with proxy to make give us a convience method so that maps can be used like an Object.</p>

<p>What other advantages apart from syntax sugar?</p>

<ul>
<li><p>Iterate it like a regular object with <code>(for in)</code> without worrying about <code>hasOwnProperty</code> checks.</p></li>
<li><p>Iterate it <code>(for of)</code> you will get arrays of length 2 of both keys and values.</p></li>
</ul>


<p><strong>Install it:</strong> <code>npm install --save objectmap</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">oMap</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;objectmap&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="nx">oMap</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">map</span><span class="p">.</span><span class="nx">answer</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span> <span class="c1">// Same as `map.set(&#39;answer&#39;,42);`</span>
</span><span class='line'>
</span><span class='line'><span class="nx">map</span><span class="p">.</span><span class="nx">answer</span><span class="p">;</span> <span class="c1">// Same as `map.get(&#39;abc&#39;);`</span>
</span><span class='line'>
</span><span class='line'><span class="k">delete</span> <span class="nx">map</span><span class="p">.</span><span class="nx">abc</span><span class="p">;</span> <span class="c1">// Same as `map.delete(&#39;abc&#39;);`</span>
</span></code></pre></td></tr></table></div></figure>


<p>Caveat: <code>map[3]</code> implies <code>map.set('3')</code> not <code>map.set(3)</code></p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/objectmap/objectmap.gif" alt="" /></p>

<p>Thanks to <a href="http://calvinmetcalf.com">Calvin</a> for this useful util :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node-rules]]></title>
    <link href="http://nmotw.in/node-rules/"/>
    <updated>2015-01-29T17:53:00+00:00</updated>
    <id>http://nmotw.in/node-rules</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/node-rules">node-rules</a></h1>

<blockquote><p>Business Rules Engine for JavaScript.</p></blockquote>

<p><code>node-rules</code> is a module of it&#8217;s own kind, it&#8217;s a light weight forward chaining Rule Engine!</p>

<p><strong>Install it:</strong> <code>npm install --save node-rules</code></p>

<p><strong>Usage:</strong></p>

<p>It&#8217;s a three step process, to get the engine running:</p>

<ul>
<li><p>Defining a Rule.</p></li>
<li><p>Defining a Fact.</p></li>
<li><p>Initialize the rules engine and execute the rule.</p></li>
</ul>


<p><strong>Create a rule:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/* Sample Rule to block a transaction if its below 500 */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">rule</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;condition&quot;</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">R</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">R</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">transactionTotal</span> <span class="o">&lt;</span> <span class="mi">500</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;consequence&quot;</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">R</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">result</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">reason</span> <span class="o">=</span> <span class="s2">&quot;The transaction was blocked as it was less than 500&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">R</span><span class="p">.</span><span class="nx">stop</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Create a fact:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/* Fact with less than 500 as transaction, and this should be blocked */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fact</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;user4&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;application&quot;</span><span class="o">:</span> <span class="s2">&quot;MOB2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;transactionTotal&quot;</span><span class="o">:</span> <span class="mi">400</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;cardType&quot;</span><span class="o">:</span> <span class="s2">&quot;Credit Card&quot;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Initialize the rules engine:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/* Creating Rule Engine instance and registering rule */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">R</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RuleEngine</span><span class="p">();</span>
</span><span class='line'><span class="nx">R</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="nx">rule</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Execute the rule:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">R</span><span class="p">.</span><span class="nx">execute</span><span class="p">(</span><span class="nx">fact</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Valid transaction&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Blocked Reason:&quot;</span> <span class="o">+</span> <span class="nx">data</span><span class="p">.</span><span class="nx">reason</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/node-rules/node-rules.gif" alt="" /></p>

<p>Thanks to <a href="https://twitter.com/mithunsatheesh">Mithun Satheesh</a> for this adventurous module.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nsp]]></title>
    <link href="http://nmotw.in/nsp/"/>
    <updated>2015-01-22T13:33:18+00:00</updated>
    <id>http://nmotw.in/nsp</id>
    <content type="html"><![CDATA[<h1><a href="http://npm.im/nsp/">nsp</a> aka: <a href="http://nodesecurity.io">Node Security Project</a></h1>

<blockquote><p>Check if your Node.js projects are using packages with known and public vulnerable dependencies, using NSP DB.</p></blockquote>

<p><strong>Install it:</strong> <code>npm install -g nsp</code></p>

<p><strong>Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nmotw.in&gt; nsp
</span><span class='line'>
</span><span class='line'>Usage: <span class="o">[</span><span class="nb">command</span><span class="o">]</span> --arg<span class="o">=</span>value --arg2
</span><span class='line'>
</span><span class='line'>Help:
</span><span class='line'>  <span class="nb">help              </span>Show <span class="nb">help </span>menu
</span><span class='line'>  <span class="o">[</span>cmd<span class="o">]</span> <span class="nb">help        </span>Show <span class="nb">command help </span>menu
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>  version           shows the current version of nsp
</span><span class='line'>  shrinkwrap        <span class="nb">alias </span>to audit-shrinkwrap
</span><span class='line'>  audit-shrinkwrap  audits your <span class="sb">`</span>npm shrinkwrap<span class="sb">`</span> against NSP db
</span><span class='line'>  package           <span class="nb">alias </span>to audit-package
</span><span class='line'>  audit-package     audits your package.json against NSP db
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nmotw.in&gt; cat package.json
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;test&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;version&quot;</span>: <span class="s2">&quot;0.0.1&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;author&quot;</span>: <span class="s2">&quot;Node Security Project&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;dependencies&quot;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;node-print&quot;</span>: <span class="s2">&quot;0.0.4&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;request&quot;</span>: <span class="s2">&quot;^2.40.0&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;qs&quot;</span>: <span class="s2">&quot;^0.5&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>nmotw.in&gt; nsp package
</span><span class='line'>Name  Installed  Patched  Vulnerable Dependency
</span><span class='line'>qs      0.5.6     &gt;<span class="o">=</span> 1.x  <span class="nb">test</span>@0.0.1 &gt; qs@0.5.6
</span></code></pre></td></tr></table></div></figure>


<p>The same can be used for auditing <a href="https://docs.npmjs.com/cli/shrinkwrap">shrinkwrap</a>.</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/nsp/nsp.gif" alt="nsp" /></p>

<p>Thanks to the <a href="https://twitter.com/nodesecurity">nodesecurity</a> for making security easy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[isomorphic-fetch]]></title>
    <link href="http://nmotw.in/isomorphic-fetch/"/>
    <updated>2015-01-15T20:45:00+00:00</updated>
    <id>http://nmotw.in/isomorphic-fetch</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/isomorphic-fetch">isomorphic-fetch</a></p>

<blockquote><p>Isomorphic WHATWG Fetch API, for Node &amp; Browserify</p></blockquote>

<p><code>fetch</code> from GitHub makes it easier to make web requests and handle responses than using an XMLHttpRequest. This polyfill is written as closely as possible to the standard Fetch <a href="https://fetch.spec.whatwg.org">specification</a>.</p>

<p>Well, <code>fetch</code> was in the nmotw queue for quite some time now, but this week seems to be special as FF nightly and Chrome canary rolled out this API ;)</p>

<p><strong>Install it:</strong>  <code>npm install isomorphic-fetch</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Fetch random XKCD comic.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;isomorphic-fetch&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fetch</span><span class="p">(</span><span class="s1">&#39;http://xkcd-imgs.herokuapp.com/&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">ex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;failed&#39;</span><span class="p">,</span> <span class="nx">ex</span><span class="p">)</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Would log something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://imgs.xkcd.com/comics/wikifriends.png&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;It\&#39;s crazy how much my gut opinion of a movie/song is swayed by what other people say, regardless of how I felt coming out of the theater.&#39;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/isomorphic-fetch/isomorphic-fetch.gif" alt="isomorphic-fetch" /></p>

<p>Thanks to <a href="https://mattandre.ws/">Matt Andrews</a> for <code>isomorphic-fetch</code> (:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[safe-json-parse]]></title>
    <link href="http://nmotw.in/safe-json-parse/"/>
    <updated>2015-01-08T16:56:50+00:00</updated>
    <id>http://nmotw.in/safe-json-parse</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/safe-json-parse">safe-json-parse</a></h1>

<blockquote><p>Parse JSON safely without throwing.</p></blockquote>

<p>Sweet, simple and effictive module for parsing JSON safely :)</p>

<p><strong>Get it:</strong> <code>npm install safe-json-parse --save</code></p>

<p><strong>Sample usage:</strong></p>

<p>With callback:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">sf</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;safe-json-parse&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">sf</span><span class="p">(</span><span class="s2">&quot;{}&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">json</span><span class="p">)</span> <span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span><span class="nx">json</span><span class="p">);});</span>
</span><span class='line'><span class="kc">null</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">sf</span><span class="p">(</span><span class="s2">&quot;meow&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">json</span><span class="p">)</span> <span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span><span class="nx">json</span><span class="p">);});</span>
</span><span class='line'><span class="p">[</span><span class="nx">SyntaxError</span><span class="o">:</span> <span class="nx">Unexpected</span> <span class="nx">token</span> <span class="nx">m</span><span class="p">]</span> <span class="kc">undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>As Tuples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">sf</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;safe-json-parse/tuple&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">sf</span><span class="p">({})</span>
</span><span class='line'><span class="p">[</span> <span class="p">[</span><span class="nx">SyntaxError</span><span class="o">:</span> <span class="nx">Unexpected</span> <span class="nx">token</span> <span class="nx">o</span><span class="p">],</span> <span class="kc">undefined</span> <span class="p">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">sf</span><span class="p">(</span><span class="s2">&quot;{}&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span> <span class="kc">null</span><span class="p">,</span> <span class="p">{}</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/safe-json-parse/safe-json-parse.gif" alt="safe-json-parse" /></p>

<p>Thanks to <a href="https://twitter.com/raynos">Raynos</a> for helping us with safely parsing JSONs ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[css-explain]]></title>
    <link href="http://nmotw.in/css-explain/"/>
    <updated>2015-01-01T13:23:53+00:00</updated>
    <id>http://nmotw.in/css-explain</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/css-explain">css-explain</a></h1>

<blockquote><p>Think of it like SQL EXPLAIN, but for CSS selectors.</p></blockquote>

<p><code>css-explain</code> is one of such rare modules that helps us to learn or explain CSS selectors with ease.</p>

<p><strong>Get it:</strong> <code>npm install css-explain</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">cssExplain</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;css-explain&#39;</span><span class="p">).</span><span class="nx">cssExplain</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">cssExplain</span><span class="p">(</span><span class="s2">&quot;div .info&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span> <span class="nx">selector</span><span class="o">:</span> <span class="s1">&#39;div .info&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">parts</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;div&#39;</span><span class="p">,</span> <span class="s1">&#39;.info&#39;</span> <span class="p">],</span>
</span><span class='line'>  <span class="nx">category</span><span class="o">:</span> <span class="s1">&#39;class&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">key</span><span class="o">:</span> <span class="s1">&#39;info&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">specificity</span><span class="o">:</span> <span class="p">[</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span> <span class="p">],</span>
</span><span class='line'>  <span class="nx">score</span><span class="o">:</span> <span class="mi">6</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">messages</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;Uses a descendant selector with a rightmost class selector&#39;</span> <span class="p">]</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">cssExplain</span><span class="p">(</span><span class="s2">&quot;div#info&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span> <span class="nx">selector</span><span class="o">:</span> <span class="s1">&#39;div#info&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">parts</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;div#info&#39;</span> <span class="p">],</span>
</span><span class='line'>  <span class="nx">category</span><span class="o">:</span> <span class="s1">&#39;id&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">key</span><span class="o">:</span> <span class="s1">&#39;info&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">specificity</span><span class="o">:</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span> <span class="p">],</span>
</span><span class='line'>  <span class="nx">score</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">messages</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;ID is overly qualified by a tag name&#39;</span> <span class="p">]</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">cssExplain</span><span class="p">(</span><span class="s2">&quot;div &gt; p#info&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span> <span class="nx">selector</span><span class="o">:</span> <span class="s1">&#39;div &gt; p#info&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">parts</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;div&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;p#info&#39;</span> <span class="p">],</span>
</span><span class='line'>  <span class="nx">category</span><span class="o">:</span> <span class="s1">&#39;id&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">key</span><span class="o">:</span> <span class="s1">&#39;info&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">specificity</span><span class="o">:</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span> <span class="p">],</span>
</span><span class='line'>  <span class="nx">score</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">messages</span><span class="o">:</span>
</span><span class='line'>   <span class="p">[</span> <span class="s1">&#39;ID is overly qualified by a tag name&#39;</span><span class="p">,</span>
</span><span class='line'>     <span class="s1">&#39;ID is overly qualified by a child selector&#39;</span> <span class="p">]</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/css-explain/css-explain.gif" alt="css-explain" /></p>

<p>Thanks to <a href="https://twitter.com/joshpeek">Joshua Peek</a> for css-explain, do <a href="http://josh.github.io/css-explain/">checkout</a> the webbased app of the same.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[printf]]></title>
    <link href="http://nmotw.in/printf/"/>
    <updated>2014-12-24T12:41:33+00:00</updated>
    <id>http://nmotw.in/printf</id>
    <content type="html"><![CDATA[<h1><a href="">printf</a></h1>

<p>Full implementation of the <code>printf</code>/<code>sprintf</code> family in pure JS.</p>

<pre><code>            _       _    __ 
           (_)     | |  / _|
 _ __  _ __ _ _ __ | |_| |_ 
| '_ \| '__| | '_ \| __|  _|
| |_) | |  | | | | | |_| |
| .__/|_|  |_|_| |_|\__|_|
| |
|_|
</code></pre>

<p><strong>Get it:</strong> <code>npm install printf</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">printf</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;printf&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">printf</span><span class="p">(</span><span class="nx">format</span><span class="p">,</span> <span class="nx">args</span><span class="p">...);</span>
</span><span class='line'><span class="nx">printf</span><span class="p">(</span><span class="nx">write_stream</span><span class="p">,</span> <span class="nx">format</span><span class="p">,</span> <span class="nx">args</span><span class="p">...);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Flags:</strong></p>

<ul>
<li><p><code></code> (space)</p></li>
<li><p><code>+</code></p></li>
<li><p><code>-</code></p></li>
<li><p><code>0</code></p></li>
</ul>


<p><strong>Features:</strong></p>

<ul>
<li><p><code>Width / precision</code> => <code>%2f</code></p></li>
<li><p><code>Numerical bases</code> => <code>%c</code></p></li>
<li><p><code>Miscellaneous</code> => <code>%d%%</code>, <code>+%s%+</code></p></li>
<li><p><code>Extra</code> => The <code>%O</code> converter will call <code>util.inspect(...)</code> at the argument, <code>%-*.*f</code>.</p></li>
</ul>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/printf/printf.gif" alt="" /></p>

<p>Thanks to <a href="http://www.adaltas.com">Worms David</a> for <code>printf</code>!</p>

<p><code>printf('******************%s**************',"Merry Xmas!")</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[malarkey]]></title>
    <link href="http://nmotw.in/malarkey/"/>
    <updated>2014-12-18T12:37:40+00:00</updated>
    <id>http://nmotw.in/malarkey</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/malarkey">malarkey</a></h1>

<blockquote><p>Simulate a typewriter/ticker effect on a DOM element.</p></blockquote>

<p>Even though <code>malarkey</code> means &#8216;meaningless talk; nonsense&#8217;, this is a sweet module that helps us to simulate typewriter effect on DOM elements.</p>

<p><strong>Install it:</strong> <code>npm install --save malarkey</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;.malarkey&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">opts</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">typeSpeed</span><span class="o">:</span> <span class="mi">50</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">deleteSpeed</span><span class="o">:</span> <span class="mi">50</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">pauseDelay</span><span class="o">:</span> <span class="mi">2000</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">loop</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">postfix</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">malarkey</span><span class="p">(</span><span class="nx">elem</span><span class="p">,</span> <span class="nx">opts</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="s1">&#39;Say hello&#39;</span><span class="p">).</span><span class="nx">pause</span><span class="p">().</span><span class="k">delete</span><span class="p">()</span>
</span><span class='line'><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="s1">&#39;Wave goodbye&#39;</span><span class="p">).</span><span class="nx">pause</span><span class="p">().</span><span class="k">delete</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>API from 1000 feet:</strong></p>

<ul>
<li><p>malarkey.type</p></li>
<li><p>malarkey.clear</p></li>
<li><p>malarkey.pause</p></li>
<li><p>malarkey.delete</p></li>
</ul>


<p>Read more about them in the <a href="https://github.com/yuanqing/malarkey#api">docs</a></p>

<p><strong>DEMO:</strong></p>

<iframe width="100%" height="300" src="http://jsfiddle.net/gnumanth/efu58rbk/embedded/result,js,html" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p><strong>GIF FTW:</strong></p>

<p><img src="http://nmotw.in/images/malarkey/malarkey.gif" alt="malarkey" /></p>

<p>P.S: All Web realted modules would need help from <a href="http://browserify.org/">browserify</a> or related tools to run on the web.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[treeify]]></title>
    <link href="http://nmotw.in/treeify/"/>
    <updated>2014-12-11T13:06:10+00:00</updated>
    <id>http://nmotw.in/treeify</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/treeify">treeify</a></h1>

<blockquote><p>converts a JS object into a nice and readable tree structure for the console</p></blockquote>

<p>Say, you an object that has the dependencies of a node module and you want to represent it as a tree structure or may you have a filesystem hierarchy to display on CLI, it&#8217;s kina tough right? Well&#8230;here is <code>treeify</code> for you!</p>

<p><strong>Get it:</strong> <code>npm install treeify</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">treeify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;treeify&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">deps</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;npm@2.1.12&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;archy@1.0.0&quot;</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;abbrev@1.0.5&quot;</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;char-spinner@1.0.1&quot;</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;block-stream@0.0.7&quot;</span><span class="o">:</span> <span class="s2">&quot;inherits@2.0.1&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
</span><span class='line'>   <span class="nx">treeify</span><span class="p">.</span><span class="nx">asTree</span><span class="p">(</span><span class="nx">deps</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//or</span>
</span><span class='line'>
</span><span class='line'><span class="nx">treeify</span><span class="p">.</span><span class="nx">asLines</span><span class="p">(</span><span class="nx">deps</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">line</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">line</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both would output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">└─</span> <span class="nx">npm</span><span class="err">@</span><span class="mf">2.1</span><span class="p">.</span><span class="mi">12</span>
</span><span class='line'>   <span class="err">├─</span> <span class="nx">archy</span><span class="err">@</span><span class="mf">1.0</span><span class="p">.</span><span class="mi">0</span>
</span><span class='line'>   <span class="err">├─</span> <span class="nx">abbrev</span><span class="err">@</span><span class="mf">1.0</span><span class="p">.</span><span class="mi">5</span>
</span><span class='line'>   <span class="err">├─</span> <span class="kr">char</span><span class="o">-</span><span class="nx">spinner</span><span class="err">@</span><span class="mf">1.0</span><span class="p">.</span><span class="mi">1</span>
</span><span class='line'>   <span class="err">└─</span> <span class="nx">block</span><span class="o">-</span><span class="nx">stream</span><span class="err">@</span><span class="mf">0.0</span><span class="p">.</span><span class="mi">7</span><span class="o">:</span> <span class="nx">inherits</span><span class="err">@</span><span class="mf">2.0</span><span class="p">.</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW:</strong></p>

<p><img src="http://nmotw.in/images/treeify/treeify.gif" alt="treeify" /></p>

<p>Thanks to <a href="http://lukep.org/">Luke Plaster</a> for making our life a bit more easier on the CLI.</p>
]]></content>
  </entry>
  
</feed>
