<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NMOTW]]></title>
  <link href="http://nmotw.in/atom.xml" rel="self"/>
  <link href="http://nmotw.in/"/>
  <updated>2015-09-10T14:40:36+00:00</updated>
  <id>http://nmotw.in/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[npm-check]]></title>
    <link href="http://nmotw.in/npm-check/"/>
    <updated>2015-09-10T14:28:00+00:00</updated>
    <id>http://nmotw.in/npm-check</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/npm-check">npm-check</a></h1>

<blockquote><p>Check for outdated, incorrect, and unused dependencies.</p></blockquote>

<p><strong>Features:</strong></p>

<ul>
<li><em>Interactive Update</em> means less typing.</li>
<li>Scoped packages support for the modern npm user.</li>
<li>Works with public and private registries.</li>
<li>Won&#8217;t query npm registry for packages with <code>private: true</code>.</li>
<li>Kindly informs you if a dependency is not being used.</li>
<li>Emoji in a command-line app, because command-line apps can be fun too.</li>
</ul>


<p>Very much similar to <a href="http://nmotw.in/npm-check-updates/">npm-check-updates</a> but far more generic and interactive!</p>

<p><strong>Get it:</strong> <code>npm install -g npm-check-updates</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm-check --help
</span><span class='line'>
</span><span class='line'>  Usage: npm-check <span class="o">[</span>options<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  Options:
</span><span class='line'>
</span><span class='line'>    -h, --help         output usage information
</span><span class='line'>    -V, --version      output the version number
</span><span class='line'>    -u, --update       Interactive update.
</span><span class='line'>    -g, --global       Look at global modules.
</span><span class='line'>    -s, --skip-unused  Skip check <span class="k">for </span>unused packages.
</span><span class='line'>    -p, --production   Ignore devDependencies.
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">npmCheck</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;npm-check&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">npmCheck</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/npm-check/npm-check.gif" alt="npm-check" /></p>

<p>Thanks to <a href="https://twitter.com/dylang">@dylang</a> for <code>npm-check</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[speed-test]]></title>
    <link href="http://nmotw.in/speed-test/"/>
    <updated>2015-09-03T13:07:24+00:00</updated>
    <id>http://nmotw.in/speed-test</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/speed-test">speed-test</a></h1>

<blockquote><p>Test your internet connection speed and ping using speedtest.net from the CLI.</p></blockquote>

<p>This is product of <a href="https://github.com/sindresorhus/module-requests/">sindresorhus/module-requests</a> makes use of <a href="https://github.com/ddsol/speedtest.net">speedtest-net</a>
helps us to know our intenet connection speed and ping with a beautiful UI.</p>

<p><strong>Get it:</strong> <code>$ npm install --global speed-test</code></p>

<p><strong>Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>speed-test --help
</span><span class='line'>
</span><span class='line'>  Usage
</span><span class='line'>    <span class="nv">$ </span>speed-test
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW:</strong></p>

<p><img src="http://nmotw.in/images/speed-test/speed-test.gif" alt="speed-test" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[url-pattern]]></title>
    <link href="http://nmotw.in/url-pattern/"/>
    <updated>2015-08-27T08:37:23+00:00</updated>
    <id>http://nmotw.in/url-pattern</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/url-pattern">url-pattern</a></p>

<blockquote><p>easier than regex string matching for urls, domains, filepaths and other strings.</p></blockquote>

<p><code>url-pattern</code> can capture named parts of strings and conveniently returns them as objects.</p>

<p>Also does the reverse and generates strings given a pattern and such an object.</p>

<p><strong>install:</strong> <code>npm install url-pattern</code></p>

<p><strong>simple match example:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">UrlPattern</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;url-pattern&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UrlPattern</span><span class="p">(</span><span class="s1">&#39;/api/users/:id&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">pattern</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="s1">&#39;/api/users/10&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;10&#39;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">pattern</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="s1">&#39;/api/products/5&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kc">null</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>complex match example showing off escaping, wildcards and optional segments:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UrlPattern</span><span class="p">(</span><span class="s1">&#39;(http(s)\\://)(:subdomain.):domain.:tld(/*)&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">pattern</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="s1">&#39;google.de&#39;</span><span class="p">);</span> <span class="c1">// {domain: &#39;google&#39;, tld: &#39;de&#39;}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">pattern</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="s1">&#39;https://www.google.com&#39;</span><span class="p">);</span> <span class="c1">// {subdomain: &#39;www&#39;, domain: &#39;google&#39;, tld: &#39;com&#39;}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">pattern</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="s1">&#39;http://mail.google.com/mail&#39;</span><span class="p">);</span> <span class="c1">// {subdomain: &#39;mail&#39;, domain: &#39;google&#39;, tld: &#39;com&#39;, _: &#39;mail&#39;}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">pattern</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="s1">&#39;google&#39;</span><span class="p">)</span> <span class="p">;</span> <span class="c1">// null</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>stringify example:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UrlPattern</span><span class="p">(</span><span class="s1">&#39;/api/users(/:id)&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">pattern</span><span class="p">.</span><span class="nx">stringify</span><span class="p">()</span> <span class="c1">// &#39;/api/users&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">pattern</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="nx">id</span><span class="o">:</span> <span class="mi">10</span><span class="p">})</span>  <span class="c1">//&#39; /api/users/10&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/url-pattern/url-pattern.gif" alt="url-pattern" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[human-to-cron]]></title>
    <link href="http://nmotw.in/human-to-cron/"/>
    <updated>2015-08-20T12:39:33+00:00</updated>
    <id>http://nmotw.in/human-to-cron</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/human-to-cron">human-to-cron</a></h1>

<blockquote><p>Converts human readable expression to a cron string!</p></blockquote>

<p>If you can interpert <code>0 */1 * * *</code> as <code>each minute</code> then this module is not for you ;)</p>

<p><code>human-to-cron</code> parsers the human readable expressions with the help of ES6 generators converts it into a <a href="https://en.wikipedia.org/wiki/Cron">cron</a> string.</p>

<p><strong>Get it:</strong> <code>npm install --save human-to-cron</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">humanToCron</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;human-to-cron&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">humanToCron</span><span class="p">(</span><span class="s1">&#39;once each minute&#39;</span><span class="p">)</span> <span class="c1">// =&gt; 0 */1 * * * *</span>
</span><span class='line'><span class="nx">humanToCron</span><span class="p">(</span><span class="s1">&#39;each 2 minutes&#39;</span><span class="p">)</span> <span class="c1">// =&gt; * */2 * * * *</span>
</span><span class='line'><span class="nx">humanToCron</span><span class="p">(</span><span class="s1">&#39;each second&#39;</span><span class="p">)</span> <span class="c1">// =&gt; */1 * * * * *</span>
</span><span class='line'><span class="nx">humanToCron</span><span class="p">(</span><span class="s1">&#39;once each hour&#39;</span><span class="p">)</span> <span class="c1">// =&gt; 0 0 */1 * * *</span>
</span><span class='line'><span class="nx">humanToCron</span><span class="p">(</span><span class="s1">&#39;once each day&#39;</span><span class="p">)</span> <span class="c1">// =&gt; 0 0 0 */1 * *</span>
</span><span class='line'><span class="nx">humanToCron</span><span class="p">(</span><span class="s1">&#39;once each month&#39;</span><span class="p">)</span> <span class="c1">// =&gt; 0 0 0 0 */1 *</span>
</span><span class='line'><span class="nx">humanToCron</span><span class="p">(</span><span class="s1">&#39;once each 5 months&#39;</span><span class="p">)</span> <span class="c1">// =&gt; 0 0 0 0 */5 *</span>
</span><span class='line'><span class="nx">humanToCron</span><span class="p">(</span><span class="s1">&#39;midnight&#39;</span><span class="p">)</span> <span class="c1">// =&gt; 0 0 0 * * *</span>
</span><span class='line'><span class="nx">humanToCron</span><span class="p">(</span><span class="s1">&#39;midnight each 2 minutes&#39;</span><span class="p">)</span> <span class="c1">// =&gt; 0 */2 0 * * *</span>
</span><span class='line'><span class="nx">humanToCron</span><span class="p">(</span><span class="s1">&#39;once tuesday each 10 minutes&#39;</span><span class="p">)</span> <span class="c1">// =&gt; 0 */10 * 1 * *</span>
</span><span class='line'><span class="nx">humanToCron</span><span class="p">(</span><span class="s1">&#39;friday 15:44&#39;</span><span class="p">)</span> <span class="c1">// =&gt; 0 44 15 4 * *</span>
</span><span class='line'><span class="nx">humanToCron</span><span class="p">(</span><span class="s1">&#39;august friday 15:44&#39;</span><span class="p">)</span> <span class="c1">// =&gt; 0 44 15 4 7 *</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/human-to-cron/human-to-cron.gif" alt="human-to-cron" /></p>

<p>Thanks to <a href="https://github.com/rainder">Andrius Skerla</a> for this cheeky module!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lightcards]]></title>
    <link href="http://nmotw.in/lightcards/"/>
    <updated>2015-08-13T14:06:54+00:00</updated>
    <id>http://nmotw.in/lightcards</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/lightcards">lightcard</a></h1>

<blockquote><p>Lightweight Chinese flashcards.</p></blockquote>

<p><code>lightcards</code> is one of those lightweight, single purpose, fun modules! This helps you to make flash cards that would help you to learn Chinese characters!
By default, lightcards uses vocabulary.txt from the current working directory. If no <code>vocabulary.txt</code> can be found, lightcards will create it create it for you,
after which it will start a minimalistic server with a cute interface to go through the  list of word that was provided from a file or stdin.</p>

<p><strong>Get it</strong>: <code>npm install -g lightcards</code></p>

<p><strong>Simple usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>lightcards init <span class="o">&amp;&amp;</span> lightcards
</span><span class='line'>
</span><span class='line'>Reading vocabulary from vocabulary.txt... OK!
</span><span class='line'>Generating flashcards... OK!
</span><span class='line'>Compiling scripts... OK!
</span><span class='line'>Starting <span class="nb">local </span>web server... OK!
</span><span class='line'>
</span><span class='line'>Start learning on http://localhost:3000
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/lightcards/lightcards.gif" alt="lightcards" /></p>

<p>Thanks to <a href="https://github.com/odsod">Oscar Söderlund</a> for <code>lightcards</code>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[curry-this]]></title>
    <link href="http://nmotw.in/curry-this/"/>
    <updated>2015-08-06T15:16:13+00:00</updated>
    <id>http://nmotw.in/curry-this</id>
    <content type="html"><![CDATA[<h1>Curry-this</h1>

<p><code>Curry-this</code> makes creating curryied function simple and expresive by invoking <code>curry</code> with the <a href="https://github.com/zenparsing/es-function-bind">function bind syntax <code>::</code></a>.
Apart from the expresive way of creating a curried function, the main feature are placeholders.
A placeholder (<code>_</code>) is a <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Symbol"><code>Symbol</code></a> which allows to curry specific arguments of a function.</p>

<p><strong>Install it:</strong> <code>npm install --save curry-this</code></p>

<h2>Basic usage</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="p">{</span><span class="nx">curry</span><span class="p">,</span> <span class="nx">_</span><span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;curry-this&#39;</span><span class="p">)();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Got a simple function?</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">plus</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="nx">c</span>
</span><span class='line'><span class="p">)</span><span class="o">::</span><span class="nx">curry</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">plus</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>  <span class="c1">//» 6</span>
</span><span class='line'><span class="nx">plus</span><span class="p">(</span><span class="mi">1</span><span class="p">)(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>  <span class="c1">//» 6</span>
</span><span class='line'><span class="nx">plus</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)(</span><span class="mi">3</span><span class="p">);</span>  <span class="c1">//» 6</span>
</span><span class='line'><span class="nx">plus</span><span class="p">(</span><span class="mi">1</span><span class="p">)(</span><span class="mi">2</span><span class="p">)(</span><span class="mi">3</span><span class="p">);</span>  <span class="c1">//» 6</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Placeholders</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Got a monster function?</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="p">{</span><span class="nx">open</span><span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">newScript</span> <span class="o">=</span> <span class="nx">open</span><span class="o">::</span><span class="nx">curry</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">,</span> <span class="mi">0755</span><span class="p">,</span> <span class="nx">_</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">newScript</span><span class="p">(</span><span class="s1">&#39;do-wonders.sh&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">file</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// The `file` is ready.</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can try this with <code>babel-node</code>. Make sure that you use the <code>--stage=0</code> option.</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/curry-this/curry-this.gif" alt="curry-this" /></p>

<p>Thanks to <a href="http://stoeffel.github.io/">Christoph Hermann</a> and <a href="https://github.com/tomekwi">tomekwi</a> for making cury more fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[caniuse-cmd]]></title>
    <link href="http://nmotw.in/caniuse-cmd/"/>
    <updated>2015-07-30T10:32:22+00:00</updated>
    <id>http://nmotw.in/caniuse-cmd</id>
    <content type="html"><![CDATA[<h1><a href="https://github.com/sgentle/caniuse-cmd">caniuse-cmd</a></h1>

<blockquote><p><code>caniuse.com</code> on CLI!</p></blockquote>

<p><code>caniuse-cmd</code> brings the power of <a href="http://caniuse.com">caniuse</a> on to the command line, it makes use of <a href="https://www.npmjs.com/package/caniuse-db">caniuse-db</a> module
which provides raw browser/feature support data for the same.</p>

<p><strong>Install it:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>npm install --global caniuse-cmd
</span></code></pre></td></tr></table></div></figure>


<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nmotw&gt; caniuse webrtc --short
</span><span class='line'>WebRTC Peer-to-peer connections ✔ 55.36% ◒ 0%
</span><span class='line'>  IE ✘  Edge ✘  Firefox ✘ 2+ ✔ 22+ᵖ Chrome ✘ 4+ ✔ 23+ᵖ Safari ✘  Opera ✘ 9+ ✔ 18+ᵖ
</span><span class='line'>
</span><span class='line'>nmotw&gt; caniuse webrtc --short -a
</span><span class='line'>WebRTC Peer-to-peer connections ✔ 55.36% ◒ 0%
</span><span class='line'>  IE ✘  Edge ✘  Firefox ✘ 2+ ✔ 22+ᵖ Chrome ✘ 4+ ✔ 23+ᵖ Safari ✘  Opera ✘ 9+ ✔ 18+ᵖ
</span><span class='line'>
</span><span class='line'>nmotw&gt; caniuse webrtc --short --abbrv
</span><span class='line'>WebRTC Peer-to-peer connections ✔ 55.36% ◒ 0%
</span><span class='line'>  IE ✘  Edge ✘  Firefox ✘ 2+ ✔ 22+ᵖ Chrome ✘ 4+ ✔ 23+ᵖ Safari ✘  Opera ✘ 9+ ✔ 18+ᵖ
</span><span class='line'>
</span><span class='line'>nmotw&gt; caniuse webrtc --short --abbrev
</span><span class='line'>WebRTC Peer-to-peer connections ✔ 55.36% ◒ 0%
</span><span class='line'>  IE ✘  Edge ✘  FF ✘ 2+ ✔ 22+ᵖ Chr. ✘ 4+ ✔ 23+ᵖ Saf. ✘  Op. ✘ 9+ ✔ 18+ᵖ
</span><span class='line'>
</span><span class='line'>nmotw&gt; caniuse webrtc --short --abbrev --browser ff
</span><span class='line'>WebRTC Peer-to-peer connections ✔ 55.36% ◒ 0%
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>nmotw&gt; caniuse webrtc --long
</span><span class='line'>WebRTC Peer-to-peer connections ✔ 55.36% ◒ 0% <span class="o">[</span>W3C Working Draft<span class="o">]</span>
</span><span class='line'>  Method of allowing two users to communicate directly, browser to browser using the RTCPeerConnection API.
</span><span class='line'>  <span class="c">#JSAPI</span>
</span><span class='line'>
</span><span class='line'>  IE ✘
</span><span class='line'>  Edge ✘
</span><span class='line'>  Firefox ✘ 2+ ✔ 22+ᵖ
</span><span class='line'>  Chrome ✘ 4+ ✔ 23+ᵖ
</span><span class='line'>  Safari ✘
</span><span class='line'>  Opera ✘ 9+ ✔ 18+ᵖ
</span></code></pre></td></tr></table></div></figure>


<p>P.S: Do cehckout the CLI <a href="https://github.com/sgentle/caniuse-cmd#does-it-have-lots-of-command-line-options">flags</a></p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/caniuse-cmd/caniuse-cmd.gif" alt="caniuse-cmd.gif" /></p>

<p>Thanks to <a href="https://github.com/sgentle">Sam Gentle</a> for bringing this to the CLI.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[combokeys]]></title>
    <link href="http://nmotw.in/combokeys/"/>
    <updated>2015-07-23T14:32:46+00:00</updated>
    <id>http://nmotw.in/combokeys</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/combokeys">combokeys</a></p>

<blockquote><p>Handles keyboard shortcuts in the browser.</p></blockquote>

<p><code>combokeys</code> is a fork of <a href="https://github.com/ccampbell/mousetrap">ccampbell/mousetrap</a> with two main changes:</p>

<ul>
<li>Refactored as CommonJS</li>
<li>Doesn&#8217;t automatically listen on the document. Instead, it is now a constructor and the element on which to listen must be provided on instantiation.</li>
</ul>


<p><strong>Install it:</strong> <code>npm install --save combokeys</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Combokeys</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;combokeys&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Mousetrap</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Combokeys</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Or, instantiate it for one or more specific elements:</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">firstCombokeys</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Combokeys</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;first&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nx">firstCombokeys</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;4&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;4&#39;</span><span class="p">);</span> <span class="p">});</span>
</span><span class='line'><span class="nx">firstCombokeys</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;?&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;show shortcuts!&#39;</span><span class="p">);</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/combokeys/combokeys.gif" alt="combokeys" /></p>

<p>Thanks to <a href="https://github.com/mightyiam">Shahar Or</a> for porting <code>mousetrap</code> to <code>combokeys</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[easydate]]></title>
    <link href="http://nmotw.in/easydate/"/>
    <updated>2015-07-16T14:42:07+00:00</updated>
    <id>http://nmotw.in/easydate</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/easydate">easydate</a></p>

<blockquote><p>get date and/or time by pattern.</p></blockquote>

<p>A simple date and time util that returns the date according to a pattern, <code>easydate</code> takes two arguments, first one being a pattern string
and second one being an config object.</p>

<p><strong>Pattern Options:</strong></p>

<ul>
<li><code>Y</code> Full year (number - e.g. <code>2012</code>)</li>
<li><code>y</code> Year (number - e.g. <code>12</code>)</li>
<li><code>M</code> Month (number - e.g. <code>11</code>)</li>
<li><code>d</code> Day (number - e.g. <code>28</code>)</li>
<li><code>h</code> Hour (number - e.g. <code>02</code>)</li>
<li><code>m</code> Minute (number - e.g. <code>01</code>)</li>
<li><code>s</code> Second (number - e.g. <code>33</code>)</li>
<li><code>l</code> Millisecond (number - e.g. <code>001</code>)</li>
<li><code>z</code> Timezone (string - e.g. <code>UTC</code>, <code>UTC+1</code>, <code>UTC-11</code>)</li>
<li><code>x</code> DST (string - either <code>'DST'</code> or <code>''</code>)</li>
</ul>


<p><strong>Config options:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nx">setDate</span><span class="o">:</span> <span class="s1">&#39;Date&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">timeZone</span><span class="o">:</span> <span class="s1">&#39;utc/local&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">adjust</span><span class="o">:</span> <span class="s1">&#39;Whether or not to adjust DST&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Install it:</strong> <code>npm install --save easydate</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">easydate</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;easydate&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">easydate</span><span class="p">(</span><span class="s1">&#39;d-M-y&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">easydate</span><span class="p">(</span><span class="s1">&#39;h:m:s.l&#39;</span><span class="p">,</span> <span class="s1">&#39;2015-11-03T16:06:08.123Z&#39;</span><span class="p">)</span> <span class="c1">// &quot;16:06:08.123&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">easydate</span><span class="p">(</span><span class="s1">&#39;z&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">timeZone</span><span class="o">:</span> <span class="s1">&#39;utc&#39;</span><span class="p">})</span> <span class="c1">// =&gt; &quot;UTC&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">easydate</span><span class="p">(</span><span class="s1">&#39;h:m:s z x&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">setDate</span><span class="o">:</span> <span class="s1">&#39;2016-08-01T00:00:00.000Z&#39;</span><span class="p">,</span> <span class="nx">adjust</span><span class="o">:</span> <span class="kc">true</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/easydate/easydate.gif" alt="easydate" /></p>

<p>Thanks to <a href="https://medium.com/@roryrjb">Rory Bradford</a> for this handy util.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ramjet]]></title>
    <link href="http://nmotw.in/ramjet/"/>
    <updated>2015-07-09T17:00:40+00:00</updated>
    <id>http://nmotw.in/ramjet</id>
    <content type="html"><![CDATA[<p><a href="http://npm.im/ramjet">ramjet</a></p>

<blockquote><p>Transform DOM elements into each another with smooth transitions</p></blockquote>

<p><code>ramjet</code> helps us to Morph DOM elements from one state to another with smooth transitions!</p>

<p>All it does is:</p>

<ul>
<li><p>Clone the elements and all their children.</p></li>
<li><p>Transform the second element so that it completely overlaps with the first.</p></li>
<li><p>Animating the two elements together until the first element has exactly the same position and dimensions as the second element.</p></li>
</ul>


<p><strong>install it:</strong> <code>npm install --save ramjet</code></p>

<p><strong>sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&#39;a&#39;</span> <span class="na">style=</span><span class="s">&#39;background-color: red; font-size: 4em; padding: 1em;&#39;</span><span class="nt">&gt;</span>a<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&#39;b&#39;</span> <span class="na">style=</span><span class="s">&#39;background-color: blue; font-size: 4em; padding: 1em;&#39;</span><span class="nt">&gt;</span>b<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>  <span class="nx">ramjet</span><span class="p">.</span><span class="nx">transform</span><span class="p">(</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="p">);</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/ramjet/ramjet.gif" alt="ramjet.js" /></p>

<p>Thanks to <a href="http://www.rich-harris.co.uk/">Rich Harris</a> for <code>ramjet</code> (:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fade]]></title>
    <link href="http://nmotw.in/fade/"/>
    <updated>2015-07-02T16:54:12+00:00</updated>
    <id>http://nmotw.in/fade</id>
    <content type="html"><![CDATA[<h1><a href="http://npm.im/fade">fade</a></h1>

<blockquote><p>Fade a HTML element using CSS transitions.</p></blockquote>

<p>Yes, you read it right, this module helps you to fade a HTML element. &#8220;Do one thing and do it right!&#8221;, looks like the moto
behind this module, that lets us to <code>fade.in</code>, <code>fade.out</code> and fade an element to a specifie opacity, which also takes a
callback as one of it&#8217;s params and execute it after animation ends and works across browsers with vendor prefixes.</p>

<p><strong>Install it:</strong> <code>npm install --save fade</code> # browserify it!</p>

<p><strong>Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">fade</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fade&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">el</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#el&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fade</span><span class="p">.</span><span class="nx">out</span><span class="p">(</span><span class="nx">el</span><span class="p">);</span> <span class="c1">// fade el out in 1s</span>
</span><span class='line'><span class="nx">fade</span><span class="p">.</span><span class="k">in</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="mi">1500</span><span class="p">);</span> <span class="c1">// fade el in in 1.5s</span>
</span><span class='line'><span class="nx">fade</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">,</span> <span class="mi">3000</span><span class="p">);</span> <span class="c1">// fade el to opacity 0.3 in 3s </span>
</span><span class='line'><span class="nx">fade</span><span class="p">.</span><span class="nx">out</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">el</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="s1">&#39;none&#39;</span><span class="p">;</span> <span class="c1">// set display to none after fade out</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/fade/fade.gif" alt="fade.gif" /></p>

<p>Thanks to <a href="http://juliangruber.com/">Julian Gruber</a> for this sweet little module.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[html.js]]></title>
    <link href="http://nmotw.in/html.js/"/>
    <updated>2015-06-25T12:12:57+00:00</updated>
    <id>http://nmotw.in/html.js</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/html.js">html.js</a></h1>

<blockquote><p>An intuitive, extensible way to work directly with the DOM.</p></blockquote>

<p><code>html.js</code> is a fork of <a href="http://adriancooney.ie/voyeur.js/">voyeur.js</a> that has made it more simpler to deal with DOM in a
relatively new way.</p>

<p>It has a pretty extensive <a href="http://nbubna.github.io/HTML/#API">API</a> and you could also create your own plugins
<code>HTML._.fn.name = function;</code></p>

<p><strong>Get it:</strong> <code>npm install --save html.js</code></p>

<p><strong>Usage Example:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">let</span> <span class="nx">HTML</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;html.js&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">HTML</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">header</span><span class="p">;</span> <span class="c1">// returns header element.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">HTML</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="s2">&quot;#example&quot;</span><span class="p">).</span><span class="nx">h1</span><span class="p">.</span><span class="nx">em</span><span class="p">;</span> <span class="c1">// chain on, man.</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="s1">&#39;each&#39;</span> <span class="k">in</span> <span class="nx">node</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">HTML</span><span class="p">.</span><span class="nx">ify</span><span class="p">(</span><span class="nx">node</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">node</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="s1">&#39; is your friend!&#39;</span><span class="p">);</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/html.js/html.js.gif" alt="html.js" /></p>

<p>Thanks to <a href="https://github.com/nbubna">Nathan Bubna</a> for this module.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[browser-repl]]></title>
    <link href="http://nmotw.in/browser-repl/"/>
    <updated>2015-06-18T16:46:33+00:00</updated>
    <id>http://nmotw.in/browser-repl</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/browser-repl">browser-repl</a></p>

<blockquote><p>Launch a repl on your command line to any browser in the cloud.</p></blockquote>

<p><code>browser-repl</code> is a uber cool module from <a href="http://automattic.com/">automattic</a> that helps us to get a particular OS/Browser
combo (JS engine) to our CLI with some webdriver protocol, scoket.io and localtunnel magic ;)</p>

<p>Currently supported browsers:</p>

<ul>
<li><p>ie</p></li>
<li><p>ie6</p></li>
<li><p>ie7</p></li>
<li><p>ie8</p></li>
<li><p>ie9</p></li>
<li><p>ie10</p></li>
<li><p>ie11</p></li>
<li><p>opera</p></li>
<li><p>safari</p></li>
<li><p>safari5</p></li>
<li><p>safari6</p></li>
<li><p>safari7</p></li>
<li><p>safari8</p></li>
<li><p>chrome</p></li>
<li><p>chromedev</p></li>
<li><p>firefox</p></li>
<li><p>firefoxdev</p></li>
<li><p>ipad</p></li>
<li><p>ipad4</p></li>
<li><p>ipad5</p></li>
<li><p>ipad5.1</p></li>
<li><p>ipad6</p></li>
<li><p>ipad6.1</p></li>
<li><p>iphone</p></li>
<li><p>iphone4</p></li>
<li><p>iphone5</p></li>
<li><p>iphone5.1</p></li>
<li><p>iphone6</p></li>
<li><p>iphone6.1</p></li>
<li><p>android</p></li>
<li><p>android4.4</p></li>
<li><p>android4.2</p></li>
<li><p>android4.1</p></li>
</ul>


<p><strong>Currently supported platforms:</strong></p>

<ul>
<li><p>winxp</p></li>
<li><p>win7</p></li>
<li><p>win8</p></li>
<li><p>win8.1</p></li>
<li><p>mac10.6</p></li>
<li><p>mac10.8</p></li>
<li><p>mac10.9</p></li>
<li><p>mac10.10</p></li>
<li><p>linux</p></li>
<li><p>android</p></li>
</ul>


<p><strong>Get it:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>npm install -g browser-repl
</span></code></pre></td></tr></table></div></figure>


<p><strong>Set up:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># In your *.rc file.</span>
</span><span class='line'><span class="nb">export </span><span class="nv">SAUCE_USERNAME</span><span class="o">=</span><span class="s2">&quot;your username&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">SAUCE_ACCESS_KEY</span><span class="o">=</span><span class="s2">&quot;your key&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To get the <code>SAUCE</code> stuff, sign up for a free OSS account on <a href="http://saucelabs.com">SauceLabs</a>.</p>

<p><strong>Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>repl
</span><span class='line'>
</span><span class='line'>usage: repl &lt;browser&gt;<span class="o">[</span>version<span class="o">]</span> <span class="o">[</span>platform<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>options:
</span><span class='line'> -h: this message
</span><span class='line'> -k: no remote <span class="sb">`</span>console<span class="sb">`</span> override
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/browser-repl/brwoser-repl.gif" alt="browser-repl" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jscpd]]></title>
    <link href="http://nmotw.in/jscpd/"/>
    <updated>2015-06-11T15:39:12+00:00</updated>
    <id>http://nmotw.in/jscpd</id>
    <content type="html"><![CDATA[<h1><a href="http://npm.im/jscpd">jscpd</a></h1>

<blockquote><p>jscpd is a tool for detect copy/paste &#8220;design pattern&#8221; in programming source code.</p></blockquote>

<p><a href="http://kucherenko.org/">Andrey Kucherenko&#8217;s</a> <code>jscpd</code> is a smart tool that helps use to detect copy paste code!</p>

<p>It supports the below langauges:</p>

<ul>
<li>JavaScript</li>
<li>Java</li>
<li>CoffeeScript</li>
<li>TypeScript</li>
<li>C++</li>
<li>PHP</li>
<li>C#</li>
<li>Go</li>
<li>Python</li>
<li>Ruby</li>
<li>C</li>
<li>Less</li>
<li>CSS</li>
<li>SCSS</li>
<li>Mixed HTML</li>
</ul>


<p><strong>Install it:</strong> <code>npm install -g jscpd</code></p>

<p><strong>Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">jscpd</span> <span class="o">--</span><span class="nx">path</span> <span class="nx">my_project</span><span class="o">/</span> <span class="o">--</span><span class="nx">languages</span> <span class="nx">javascript</span><span class="p">,</span><span class="nx">coffee</span>
</span><span class='line'>
</span><span class='line'><span class="nx">jscpd</span> <span class="o">-</span><span class="nx">f</span> <span class="o">**</span><span class="cm">/*.js -e **/</span><span class="nx">node_modules</span><span class="cm">/**</span>
</span><span class='line'>
</span><span class='line'><span class="cm">jscpd --files **/</span><span class="o">*</span><span class="p">.</span><span class="nx">js</span> <span class="o">--</span><span class="nx">exclude</span> <span class="o">**</span><span class="cm">/*.min.js --output report.xml</span>
</span><span class='line'>
</span><span class='line'><span class="cm">jscpd --files **/</span><span class="o">*</span><span class="p">.</span><span class="nx">js</span> <span class="o">--</span><span class="nx">exclude</span> <span class="o">**</span><span class="err">/*.min.js --reporter json --output report.json</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you have a <code>.cpd.yml</code> config file in the <code>pwd</code> jscpd command, you will check code for duplicates according the config.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1">#.cpd.yaml</span>
</span><span class='line'><span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">fixtures/</span>
</span><span class='line'><span class="l-Scalar-Plain">languages</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">javascript</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">coffeescript</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">typescript</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">php</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">python</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">css</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ruby</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">go</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">java</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;c++src&quot;</span>    <span class="c1"># c++ source</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">csrc</span>        <span class="c1"># c source</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">csharp</span>      <span class="c1"># c# source</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">htmlmixed</span>   <span class="c1"># html mixed source like knockout.js templates</span>
</span><span class='line'><span class="l-Scalar-Plain">exclude</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;**/*.min.js&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;**/*.mm.js&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">reporter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">json</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/jscpd/jscpd.gif" alt="jscpd-demo" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stream-generators]]></title>
    <link href="http://nmotw.in/stream-generators/"/>
    <updated>2015-06-04T20:27:12+00:00</updated>
    <id>http://nmotw.in/stream-generators</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/stream-generators">stream-generators</a></p>

<blockquote><p>Pipe ES6 Generators through Node.js streams.</p></blockquote>

<p>This is a cheeky module authored by <a href="https://twitter.com/mimetnet">@mimetent</a> which takes in a ES6 generator function and returns a readable stream!</p>

<p><strong>Install it:</strong> <code>npm install --save stream-geerators</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">streamify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;stream-generators&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">os</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;os&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">gen</span> <span class="o">=</span> <span class="kd">function</span><span class="o">*</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">yield</span> <span class="s1">&#39;Hello &#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">yield</span> <span class="s1">&#39;ES6 &#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">yield</span> <span class="s1">&#39;Stream gen&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">yield</span> <span class="nx">os</span><span class="p">.</span><span class="nx">EOL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">streamify</span><span class="p">(</span><span class="nx">gen</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">stdout</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This would output: <code>Hello ES6 Stream gen</code></p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/stream-generators/stream-generators.gif" alt="stream-generators" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[enable]]></title>
    <link href="http://nmotw.in/enable/"/>
    <updated>2015-05-28T16:05:04+00:00</updated>
    <id>http://nmotw.in/enable</id>
    <content type="html"><![CDATA[<h1><a href="enable">https://www.npmjs.com/package/enable</a></h1>

<blockquote><p>ES6 and ES7 feature detection.</p></blockquote>

<p>A simple util that would help you to check if the a required ES6 or ES7 is enabled, both in the browser and in CLI.</p>

<p><strong>Get it</strong>: <code>npm install --save enable</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">enable</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;enable&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">enable</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">feature</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">feature</span><span class="o">&gt;</span> <span class="nx">is</span> <span class="nx">supported</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Example:</span>
</span><span class='line'><span class="cm">if (enable.generator) {</span>
</span><span class='line'><span class="cm">  console.log(&#39;supports generator: `function* a() {}`&#39;);</span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>_</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[function-plot]]></title>
    <link href="http://nmotw.in/function-plot/"/>
    <updated>2015-05-21T13:51:06+00:00</updated>
    <id>http://nmotw.in/function-plot</id>
    <content type="html"><![CDATA[<h1><a href="http://npm.im/function-plot/">function-plot</a></h1>

<blockquote><p>A simple 2d function plotter powered by d3</p></blockquote>

<p>function-plot helps to render functions with little configuration think of it like a util that would help you to render something like what Google does. <a href="https://www.google.com/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;es_th=1&amp;ie=UTF-8#q=y+%3D+x+%5E+2">y = x * x</a></p>

<p>The library currently supports interactive line charts and scatterplots, whenever the graph scale is modified the function is evaluated again with
the new bounds, result: infinite graphs!</p>

<p><strong>Get it</strong> : <code>npm install --save function-plot</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">d3</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">d3</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">functionPlot</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;function-plot&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">functionPlot</span><span class="p">({</span> <span class="cm">/*Pass in the options*/</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check out the <a href="https://github.com/maurizzzio/function-plot#instance--functionplotoptions">options</a>!</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/function-plot/function-plot.gif" alt="function-plot" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[json-server]]></title>
    <link href="http://nmotw.in/json-server/"/>
    <updated>2015-05-14T12:53:06+00:00</updated>
    <id>http://nmotw.in/json-server</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/json-server">json-server</a></h1>

<blockquote><p>REST API with zero coding in less than 30 seconds.</p></blockquote>

<p>This module by <a href="https://github.com/typicode">typicode</a> helps front-end developers who need a quick back-end for prototyping and mocking!</p>

<p><strong>Get it:</strong></p>

<p>Either as a CLI app: <code>npm install -g json-server</code></p>

<p>or as a dep for your script: <code>npm install --save json-server</code></p>

<p><strong>Sample usage:</strong></p>

<p>Assume you have a <code>json.db</code> like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;posts&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span> <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;json-server&quot;</span><span class="p">,</span> <span class="s2">&quot;author&quot;</span><span class="o">:</span> <span class="s2">&quot;typicode&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="s2">&quot;comments&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span> <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;body&quot;</span><span class="o">:</span> <span class="s2">&quot;some comment&quot;</span><span class="p">,</span> <span class="s2">&quot;postId&quot;</span><span class="o">:</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are installed module globally, then do a :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>json-server json.db
</span><span class='line'>
</span><span class='line'><span class="c"># or</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>json-server http://example.com/file.json
</span></code></pre></td></tr></table></div></figure>


<p>if not, include it in your script</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">jsonServer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;json-server&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">jsonServer</span><span class="p">.</span><span class="nx">create</span><span class="p">();</span> <span class="c1">// Returns an Express server</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">jsonServer</span><span class="p">.</span><span class="nx">router</span><span class="p">(</span><span class="s1">&#39;db.json&#39;</span><span class="p">);</span> <span class="c1">// Returns an Express router</span>
</span><span class='line'>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">jsonServer</span><span class="p">.</span><span class="nx">defaults</span><span class="p">);</span> <span class="c1">// logger, static and cors middlewares</span>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">);</span> <span class="c1">// Mount router on &#39;/&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>After which the server must be up and running at: <code>http://localhost:3000</code></p>

<p><strong>Avaliable routes:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">GET</span>    <span class="o">/</span><span class="nx">posts</span>
</span><span class='line'><span class="nx">GET</span>    <span class="o">/</span><span class="nx">posts</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="nx">GET</span>    <span class="o">/</span><span class="nx">posts</span><span class="o">/</span><span class="mi">1</span><span class="o">/</span><span class="nx">comments</span>
</span><span class='line'><span class="nx">GET</span>    <span class="o">/</span><span class="nx">posts</span><span class="o">?</span><span class="nx">title</span><span class="o">=</span><span class="nx">json</span><span class="o">-</span><span class="nx">server</span><span class="o">&amp;</span><span class="nx">author</span><span class="o">=</span><span class="nx">typicode</span>
</span><span class='line'><span class="nx">POST</span>   <span class="o">/</span><span class="nx">posts</span>
</span><span class='line'><span class="nx">PUT</span>    <span class="o">/</span><span class="nx">posts</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="nx">PATCH</span>  <span class="o">/</span><span class="nx">posts</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="nx">DELETE</span> <span class="o">/</span><span class="nx">posts</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nx">SLICE</span>
</span><span class='line'><span class="nx">GET</span> <span class="o">/</span><span class="nx">posts</span><span class="o">?</span><span class="nx">_start</span><span class="o">=</span><span class="mi">20</span><span class="o">&amp;</span><span class="nx">_end</span><span class="o">=</span><span class="mi">30</span>
</span><span class='line'><span class="nx">GET</span> <span class="o">/</span><span class="nx">posts</span><span class="o">/</span><span class="mi">1</span><span class="o">/</span><span class="nx">comments</span><span class="o">?</span><span class="nx">_start</span><span class="o">=</span><span class="mi">20</span><span class="o">&amp;</span><span class="nx">_end</span><span class="o">=</span><span class="mi">30</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nx">SORT</span>
</span><span class='line'><span class="nx">GET</span> <span class="o">/</span><span class="nx">posts</span><span class="o">?</span><span class="nx">_sort</span><span class="o">=</span><span class="nx">views</span><span class="o">&amp;</span><span class="nx">_order</span><span class="o">=</span><span class="nx">DESC</span>
</span><span class='line'><span class="nx">GET</span> <span class="o">/</span><span class="nx">posts</span><span class="o">/</span><span class="mi">1</span><span class="o">/</span><span class="nx">comments</span><span class="o">?</span><span class="nx">_sort</span><span class="o">=</span><span class="nx">votes</span><span class="o">&amp;</span><span class="nx">_order</span><span class="o">=</span><span class="nx">ASC</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nx">Query</span>
</span><span class='line'><span class="nx">GET</span> <span class="o">/</span><span class="nx">posts</span><span class="o">?</span><span class="nx">q</span><span class="o">=</span><span class="nx">internet</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nx">Get</span> <span class="nx">the</span> <span class="nx">entire</span> <span class="nx">DB</span><span class="o">!</span>
</span><span class='line'><span class="nx">GET</span> <span class="o">/</span><span class="nx">db</span>
</span></code></pre></td></tr></table></div></figure>


<p>GET on <code>/</code> would look like:</p>

<p><img src="http://nmotw.in/images/json-server/json-server.png" alt="json-server-screenshot" /></p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/json-server/json-server.gif" alt="json-server" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[console.json]]></title>
    <link href="http://nmotw.in/console.json/"/>
    <updated>2015-05-07T18:14:21+00:00</updated>
    <id>http://nmotw.in/console.json</id>
    <content type="html"><![CDATA[<h1><a href="http://nmp.im/console.json">console.json</a></h1>

<blockquote><p>Adds <code>console.json</code> method that stringifies passed in objects and logs them.</p></blockquote>

<p>This is a sweet little util function by <a href="http://glebbahmutov.com/">Gleb Bahmutov</a> that makes a life bit easier while debugging huge <code>json</code> data in the console.
P.S: There is <code>console.dir</code> but <code>console.json</code> is kina appleaing expect for the color highlighting part of it.</p>

<p><strong>Install it:</strong> <code>npm install --save console.json</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Just require it once and you shall have `console.json` method for convenience.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;console.log&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;$schema&quot;</span><span class="o">:</span> <span class="s2">&quot;http://json-schema.org/draft-04/schema#&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;Product&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;A product from Acme&#39;s catalog&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;object&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;properties&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;The unique identifier for a product&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;integer&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;Name of the product&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;required&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;id&quot;</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!:</strong></p>

<p><img src="http://nmotw.in/images/console.json/console.json.gif" alt="console.json" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[color-string]]></title>
    <link href="http://nmotw.in/color-string/"/>
    <updated>2015-04-30T13:33:09+00:00</updated>
    <id>http://nmotw.in/color-string</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/color-string">color-string</a></p>

<blockquote><p>Parser and generator for CSS color strings!</p></blockquote>

<p>A module by <a href="https://github.com/harthur">Heather Arthur</a> helps us to generator and parser CSS color strings.</p>

<p>The API names are pretty self explainatory, the module has the below methods:</p>

<p><strong>Methods for parsing:</strong></p>

<ul>
<li><p>getRgba</p></li>
<li><p>getHsla</p></li>
<li><p>getRgb</p></li>
<li><p>getHsl</p></li>
<li><p>getHwb</p></li>
<li><p>getAlpha</p></li>
</ul>


<p><strong>Methods for generating:</strong></p>

<ul>
<li><p>hexString</p></li>
<li><p>rgbString</p></li>
<li><p>rgbaString</p></li>
<li><p>percentString</p></li>
<li><p>percentaString</p></li>
<li><p>hslString</p></li>
<li><p>hslaString</p></li>
<li><p>hwbString</p></li>
<li><p>keyword</p></li>
</ul>


<p><strong>Install it:</strong> <code>npm install --save color-string</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">colorString</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;color-string&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">colorString</span><span class="p">.</span><span class="nx">getRgb</span><span class="p">(</span><span class="s2">&quot;#FFF&quot;</span><span class="p">)</span>  <span class="c1">// [255, 255, 255] </span>
</span><span class='line'>
</span><span class='line'><span class="nx">colorString</span><span class="p">.</span><span class="nx">keyword</span><span class="p">([</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>       <span class="c1">// &quot;yellow&quot; </span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/color-string/color-string.gif" alt="color-string" /></p>
]]></content>
  </entry>
  
</feed>
