<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cli | NMOTW]]></title>
  <link href="http://nmotw.in/github/public/categories/cli/atom.xml" rel="self"/>
  <link href="http://nmotw.in/github/"/>
  <updated>2015-09-03T13:27:52+00:00</updated>
  <id>http://nmotw.in/github/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[speed-test]]></title>
    <link href="http://nmotw.in/github/speed-test/"/>
    <updated>2015-09-03T13:07:24+00:00</updated>
    <id>http://nmotw.in/github/speed-test</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/speed-test">speed-test</a></h1>

<blockquote><p>Test your internet connection speed and ping using speedtest.net from the CLI.</p></blockquote>

<p>This is product of <a href="https://github.com/sindresorhus/module-requests/">sindresorhus/module-requests</a> makes use of <a href="https://github.com/ddsol/speedtest.net">speedtest-net</a>
helps us to know our intenet connection speed and ping with a beautiful UI.</p>

<p><strong>Get it:</strong> <code>$ npm install --global speed-test</code></p>

<p><strong>Usage:</strong></p>

<p>```sh
$ speed-test --help</p>

<p>  Usage</p>

<pre><code>$ speed-test
</code></pre>

<p>```</p>

<p><strong>GIF FTW:</strong></p>

<p><img src="/images/speed-test/speed-test.gif" alt="speed-test" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[human-to-cron]]></title>
    <link href="http://nmotw.in/github/human-to-cron/"/>
    <updated>2015-08-20T12:39:33+00:00</updated>
    <id>http://nmotw.in/github/human-to-cron</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/human-to-cron">human-to-cron</a></h1>

<blockquote><p>Converts human readable expression to a cron string!</p></blockquote>

<p>If you can interpert <code>0 */1 * * *</code> as <code>each minute</code> then this module is not for you ;)</p>

<p><code>human-to-cron</code> parsers the human readable expressions with the help of ES6 generators converts it into a <a href="https://en.wikipedia.org/wiki/Cron">cron</a> string.</p>

<p><strong>Get it:</strong> <code>npm install --save human-to-cron</code></p>

<p><strong>Sample usage:</strong></p>

<p>```js
var humanToCron = require('human-to-cron');</p>

<p>humanToCron('once each minute') // => 0 <em>/1 * * * *
humanToCron('each 2 minutes') // => * </em>/2 * * * *
humanToCron('each second') // => <em>/1 * * * * *
humanToCron('once each hour') // => 0 0 </em>/1 * * *
humanToCron('once each day') // => 0 0 0 <em>/1 * *
humanToCron('once each month') // => 0 0 0 0 </em>/1 *
humanToCron('once each 5 months') // => 0 0 0 0 <em>/5 *
humanToCron('midnight') // => 0 0 0 * * *
humanToCron('midnight each 2 minutes') // => 0 </em>/2 0 * * *
humanToCron('once tuesday each 10 minutes') // => 0 */10 * 1 * *
humanToCron('friday 15:44') // => 0 44 15 4 * *
humanToCron('august friday 15:44') // => 0 44 15 4 7 *
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/human-to-cron/human-to-cron.gif" alt="human-to-cron" /></p>

<p>Thanks to <a href="https://github.com/rainder">Andrius Skerla</a> for this cheeky module!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[caniuse-cmd]]></title>
    <link href="http://nmotw.in/github/caniuse-cmd/"/>
    <updated>2015-07-30T10:32:22+00:00</updated>
    <id>http://nmotw.in/github/caniuse-cmd</id>
    <content type="html"><![CDATA[<h1><a href="https://github.com/sgentle/caniuse-cmd">caniuse-cmd</a></h1>

<blockquote><p><code>caniuse.com</code> on CLI!</p></blockquote>

<p><code>caniuse-cmd</code> brings the power of <a href="http://caniuse.com">caniuse</a> on to the command line, it makes use of <a href="https://www.npmjs.com/package/caniuse-db">caniuse-db</a> module
which provides raw browser/feature support data for the same.</p>

<p><strong>Install it:</strong></p>

<p><code>sh
npm install --global caniuse-cmd
</code></p>

<p><strong>Sample usage:</strong></p>

<p>```sh
nmotw> caniuse webrtc --short    <br/>
WebRTC Peer-to-peer connections ✔ 55.36% ◒ 0%
  IE ✘  Edge ✘  Firefox ✘ 2+ ✔ 22+ᵖ Chrome ✘ 4+ ✔ 23+ᵖ Safari ✘  Opera ✘ 9+ ✔ 18+ᵖ</p>

<p>nmotw> caniuse webrtc --short -a
WebRTC Peer-to-peer connections ✔ 55.36% ◒ 0%
  IE ✘  Edge ✘  Firefox ✘ 2+ ✔ 22+ᵖ Chrome ✘ 4+ ✔ 23+ᵖ Safari ✘  Opera ✘ 9+ ✔ 18+ᵖ</p>

<p>nmotw> caniuse webrtc --short --abbrv
WebRTC Peer-to-peer connections ✔ 55.36% ◒ 0%
  IE ✘  Edge ✘  Firefox ✘ 2+ ✔ 22+ᵖ Chrome ✘ 4+ ✔ 23+ᵖ Safari ✘  Opera ✘ 9+ ✔ 18+ᵖ</p>

<p>nmotw> caniuse webrtc --short --abbrev
WebRTC Peer-to-peer connections ✔ 55.36% ◒ 0%
  IE ✘  Edge ✘  FF ✘ 2+ ✔ 22+ᵖ Chr. ✘ 4+ ✔ 23+ᵖ Saf. ✘  Op. ✘ 9+ ✔ 18+ᵖ</p>

<p>nmotw> caniuse webrtc --short --abbrev --browser ff
WebRTC Peer-to-peer connections ✔ 55.36% ◒ 0%</p>

<p>nmotw> caniuse webrtc --long                     <br/>
WebRTC Peer-to-peer connections ✔ 55.36% ◒ 0% [W3C Working Draft]
  Method of allowing two users to communicate directly, browser to browser using the RTCPeerConnection API.
  #JSAPI</p>

<p>  IE ✘<br/>
  Edge ✘<br/>
  Firefox ✘ 2+ ✔ 22+ᵖ
  Chrome ✘ 4+ ✔ 23+ᵖ
  Safari ✘<br/>
  Opera ✘ 9+ ✔ 18+ᵖ
```</p>

<p>P.S: Do cehckout the CLI <a href="https://github.com/sgentle/caniuse-cmd#does-it-have-lots-of-command-line-options">flags</a></p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/caniuse-cmd/caniuse-cmd.gif" alt="caniuse-cmd.gif" /></p>

<p>Thanks to <a href="https://github.com/sgentle">Sam Gentle</a> for bringing this to the CLI.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[browser-repl]]></title>
    <link href="http://nmotw.in/github/browser-repl/"/>
    <updated>2015-06-18T16:46:33+00:00</updated>
    <id>http://nmotw.in/github/browser-repl</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/browser-repl">browser-repl</a></p>

<blockquote><p>Launch a repl on your command line to any browser in the cloud.</p></blockquote>

<p><code>browser-repl</code> is a uber cool module from <a href="http://automattic.com/">automattic</a> that helps us to get a particular OS/Browser
combo (JS engine) to our CLI with some webdriver protocol, scoket.io and localtunnel magic ;)</p>

<p>Currently supported browsers:</p>

<ul>
<li><p>ie</p></li>
<li><p>ie6</p></li>
<li><p>ie7</p></li>
<li><p>ie8</p></li>
<li><p>ie9</p></li>
<li><p>ie10</p></li>
<li><p>ie11</p></li>
<li><p>opera</p></li>
<li><p>safari</p></li>
<li><p>safari5</p></li>
<li><p>safari6</p></li>
<li><p>safari7</p></li>
<li><p>safari8</p></li>
<li><p>chrome</p></li>
<li><p>chromedev</p></li>
<li><p>firefox</p></li>
<li><p>firefoxdev</p></li>
<li><p>ipad</p></li>
<li><p>ipad4</p></li>
<li><p>ipad5</p></li>
<li><p>ipad5.1</p></li>
<li><p>ipad6</p></li>
<li><p>ipad6.1</p></li>
<li><p>iphone</p></li>
<li><p>iphone4</p></li>
<li><p>iphone5</p></li>
<li><p>iphone5.1</p></li>
<li><p>iphone6</p></li>
<li><p>iphone6.1</p></li>
<li><p>android</p></li>
<li><p>android4.4</p></li>
<li><p>android4.2</p></li>
<li><p>android4.1</p></li>
</ul>


<p><strong>Currently supported platforms:</strong></p>

<ul>
<li><p>winxp</p></li>
<li><p>win7</p></li>
<li><p>win8</p></li>
<li><p>win8.1</p></li>
<li><p>mac10.6</p></li>
<li><p>mac10.8</p></li>
<li><p>mac10.9</p></li>
<li><p>mac10.10</p></li>
<li><p>linux</p></li>
<li><p>android</p></li>
</ul>


<p><strong>Get it:</strong></p>

<p><code>sh
npm install -g browser-repl
</code>
<strong>Set up:</strong></p>

<p>```sh</p>

<h1>In your *.rc file.</h1>

<p>export SAUCE_USERNAME="your username"
export SAUCE_ACCESS_KEY="your key"
```</p>

<p>To get the <code>SAUCE</code> stuff, sign up for a free OSS account on <a href="http://saucelabs.com">SauceLabs</a>.</p>

<p><strong>Usage:</strong></p>

<p>```sh
$ repl</p>

<p>usage: repl <browser>[version] [platform]</p>

<p>options:
 -h: this message
 -k: no remote <code>console</code> override
```</p>

<p><strong>GIF FTW</strong></p>

<p><img src="/images/browser-repl/brwoser-repl.gif" alt="browser-repl" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nsp]]></title>
    <link href="http://nmotw.in/github/nsp/"/>
    <updated>2015-01-22T13:33:18+00:00</updated>
    <id>http://nmotw.in/github/nsp</id>
    <content type="html"><![CDATA[<h1><a href="http://npm.im/nsp/">nsp</a> aka: <a href="http://nodesecurity.io">Node Security Project</a></h1>

<blockquote><p>Check if your Node.js projects are using packages with known and public vulnerable dependencies, using NSP DB.</p></blockquote>

<p><strong>Install it:</strong> <code>npm install -g nsp</code></p>

<p><strong>Usage:</strong></p>

<p>```sh
nmotw.in> nsp</p>

<p>Usage: [command] --arg=value --arg2</p>

<p>Help:
  help              Show help menu
  [cmd] help        Show command help menu</p>

<p>Options:
  version           shows the current version of nsp
  shrinkwrap        alias to audit-shrinkwrap
  audit-shrinkwrap  audits your <code>npm shrinkwrap</code> against NSP db
  package           alias to audit-package
  audit-package     audits your package.json against NSP db
```</p>

<p>```sh
nmotw.in> cat package.json
{
  "name": "test",
  "version": "0.0.1",
  "author": "Node Security Project",
  "dependencies": {</p>

<pre><code>"node-print": "0.0.4",
"request": "^2.40.0",
"qs": "^0.5"
</code></pre>

<p>  }
}</p>

<p>nmotw.in> nsp package
Name  Installed  Patched  Vulnerable Dependency
qs      0.5.6     >= 1.x  test@0.0.1 > qs@0.5.6
```</p>

<p>The same can be used for auditing <a href="https://docs.npmjs.com/cli/shrinkwrap">shrinkwrap</a>.</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/nsp/nsp.gif" alt="nsp" /></p>

<p>Thanks to the <a href="https://twitter.com/nodesecurity">nodesecurity</a> for making security easy!</p>
]]></content>
  </entry>
  
</feed>
