<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dom | NMOTW]]></title>
  <link href="http://nmotw.in/github/public/categories/dom/atom.xml" rel="self"/>
  <link href="http://nmotw.in/github/"/>
  <updated>2015-07-16T14:56:23+00:00</updated>
  <id>http://nmotw.in/github/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ramjet]]></title>
    <link href="http://nmotw.in/github/ramjet/"/>
    <updated>2015-07-09T17:00:40+00:00</updated>
    <id>http://nmotw.in/github/ramjet</id>
    <content type="html"><![CDATA[<p><a href="http://npm.im/ramjet">ramjet</a></p>

<blockquote><p>Transform DOM elements into each another with smooth transitions</p></blockquote>

<p><code>ramjet</code> helps us to Morph DOM elements from one state to another with smooth transitions!</p>

<p>All it does is:</p>

<ul>
<li><p>Clone the elements and all their children.</p></li>
<li><p>Transform the second element so that it completely overlaps with the first.</p></li>
<li><p>Animating the two elements together until the first element has exactly the same position and dimensions as the second element.</p></li>
</ul>


<p><strong>install it:</strong> <code>npm install --save ramjet</code></p>

<p><strong>sample usage:</strong></p>

<p>```html</p>

<div id='a' style='background-color: red; font-size: 4em; padding: 1em;'>a</div>


<div id='b' style='background-color: blue; font-size: 4em; padding: 1em;'>b</div>




<script>
  ramjet.transform( a, b );
</script>


<p>```</p>

<p><strong>GIF FTW</strong></p>

<p><img src="/images/ramjet/ramjet.gif" alt="ramjet.js" /></p>

<p>Thanks to <a href="http://www.rich-harris.co.uk/">Rich Harris</a> for <code>ramjet</code> (:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fade]]></title>
    <link href="http://nmotw.in/github/fade/"/>
    <updated>2015-07-02T16:54:12+00:00</updated>
    <id>http://nmotw.in/github/fade</id>
    <content type="html"><![CDATA[<h1><a href="http://npm.im/fade">fade</a></h1>

<blockquote><p>Fade a HTML element using CSS transitions.</p></blockquote>

<p>Yes, you read it right, this module helps you to fade a HTML element. "Do one thing and do it right!", looks like the moto
behind this module, that lets us to <code>fade.in</code>, <code>fade.out</code> and fade an element to a specifie opacity, which also takes a
callback as one of it's params and execute it after animation ends and works across browsers with vendor prefixes.</p>

<p><strong>Install it:</strong> <code>npm install --save fade</code> # browserify it!</p>

<p><strong>Usage:</strong></p>

<p>```js
var fade = require('fade');</p>

<p>var el = document.querySelector('#el');</p>

<p>fade.out(el); // fade el out in 1s
fade.in(el, 1500); // fade el in in 1.5s
fade(el, 0.3, 3000); // fade el to opacity 0.3 in 3s
fade.out(el, function() {
  el.style.display = 'none'; // set display to none after fade out
});
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/fade/fade.gif" alt="fade.gif" /></p>

<p>Thanks to <a href="http://juliangruber.com/">Julian Gruber</a> for this sweet little module.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[html.js]]></title>
    <link href="http://nmotw.in/github/html.js/"/>
    <updated>2015-06-25T12:12:57+00:00</updated>
    <id>http://nmotw.in/github/html.js</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/html.js">html.js</a></h1>

<blockquote><p>An intuitive, extensible way to work directly with the DOM.</p></blockquote>

<p><code>html.js</code> is a fork of <a href="http://adriancooney.ie/voyeur.js/">voyeur.js</a> that has made it more simpler to deal with DOM in a
relatively new way.</p>

<p>It has a pretty extensive <a href="http://nbubna.github.io/HTML/#API">API</a> and you could also create your own plugins
<code>HTML._.fn.name = function;</code></p>

<p><strong>Get it:</strong> <code>npm install --save html.js</code></p>

<p><strong>Usage Example:</strong></p>

<p>```js
let HTML = require('html.js');</p>

<p>HTML.body.header; // returns header element.</p>

<p>HTML.query("#example").h1.em; // chain on, man.</p>

<p>if (!('each' in node)) {
  HTML.ify(node);
}
node.each(function(el){ console.log(el, ' is your friend!'); });
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/html.js/html.js.gif" alt="html.js" /></p>

<p>Thanks to <a href="https://github.com/nbubna">Nathan Bubna</a> for this module.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dompurify]]></title>
    <link href="http://nmotw.in/github/dompurify/"/>
    <updated>2015-03-05T13:17:23+00:00</updated>
    <id>http://nmotw.in/github/dompurify</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/dompurify">dompurify</a></h1>

<blockquote><p>Super-fast, uber-tolerant XSS sanitizer for HTML, MathML and SVG!</p></blockquote>

<p>DOMPurify sanitizes HTML and prevents XSS attacks.</p>

<p>|dirty HTML |  => |DOMPurify.sanitize |  => | Clean and safe HTML |</p>

<p>The faster your browser, the faster DOMPurify will be ;)</p>

<p><strong>Install it:</strong>  <code>npm install --save dompurify</code></p>

<p><strong>Sample usage:</strong></p>

<p>```js</p>

<p>var DOMpurify = require('dompurify);</p>

<p>DOMPurify.sanitize('<img src=x onerror=alert(1)//>'); // becomes <img src="x"></p>

<p>DOMPurify.sanitize('<svg>&lt;g/onload=alert(2)//<p>'); // becomes <svg><g></g></svg></p>

<p>```</p>

<p>It's configurable: <code>var config = { ALLOWED_TAGS: ['p', '#text'], KEEP_CONTENT: false };</code> and <code>DOMPurify.sanitize(str, config)</code></p>

<p>We can also use <code>hooks</code>:</p>

<ul>
<li><p>beforeSantitizeElements</p></li>
<li><p>afterSantitizeElements</p></li>
<li><p>beforeSantitizeAttributes</p></li>
<li><p>afterSantitizeAttributes</p></li>
</ul>


<p>```js
DOMPurify.addHook('beforeSantitizeElements', function(currentNode, config) {</p>

<pre><code>// Play with currentNode.
return currentNode;
</code></pre>

<p>});
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/dompurify/dompurify.gif" alt="dompurify" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dom-event]]></title>
    <link href="http://nmotw.in/github/dom-event/"/>
    <updated>2015-02-26T12:48:25+00:00</updated>
    <id>http://nmotw.in/github/dom-event</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/dom-event">dom-event</a></h1>

<blockquote><p>Add/remove DOM events</p></blockquote>

<p>Sweet and simple module that helps you to attach and remove events to a DOM element with ease and cross browser compliance all in just 15 lines of code ;)</p>

<p><strong>Add event:</strong></p>

<p><code>js
function on (element, event, callback, capture) {
  !element.addEventListener &amp;&amp; (event = 'on' + event);
  (element.addEventListener || element.attachEvent)(event, callback, capture);
  return callback;
}
</code>
<strong>Remove event:</strong></p>

<p><code>js
function off (element, event, callback, capture) {
  !element.removeEventListener &amp;&amp; (event = 'on' + event);
  (element.removeEventListener || element.detachEvent)(event, callback, capture);
  return callback;
}
</code></p>

<p><strong>Install it:</strong> <code>npm install dom-event</code></p>

<p><strong>Sample usage:</strong></p>

<p>```js
var on = require('dom-event');
var off = on.off; // :)</p>

<p>on(document.body, "click", hello);</p>

<p>function hello() {alert("hello");}</p>

<p>off(document.body, "click", hello); // No alerts :)
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/dom-event/dom-event.gif" alt="dom-event" /></p>

<p>P.S: All Web realted modules would need help from <a href="http://browserify.org/">browserify</a> or related tools to run on the web.</p>
]]></content>
  </entry>
  
</feed>
