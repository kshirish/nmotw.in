<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dom | NMOTW]]></title>
  <link href="http://nmotw.in/github/public/categories/dom/atom.xml" rel="self"/>
  <link href="http://nmotw.in/github/"/>
  <updated>2015-11-26T14:22:54+00:00</updated>
  <id>http://nmotw.in/github/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[notie]]></title>
    <link href="http://nmotw.in/github/notie/"/>
    <updated>2015-11-19T09:56:38+00:00</updated>
    <id>http://nmotw.in/github/notie</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/notie">notie</a></h1>

<blockquote><p>A simple notification plugin.</p></blockquote>

<p><code>notie</code> - A clean and simple notification plugin with alert/growl style, has no dependencies, help us to take an input,
confirmation or alter the users in a more appealing manner.</p>

<p>It's uses material design, you can override or add styling in a separate <code>.css</code> file.</p>

<p><strong>Get it:</strong> <code>npm install --save notie</code></p>

<p><strong>Sample usage:</strong></p>

<p>```js
var notie = require('notie);</p>

<p>notie.alert(style_number, 'message', time_in_seconds);</p>

<p>notie.confirm('Title text', 'Yes button text', 'No button text', yes_callback);</p>

<p>notie.input('Title text', 'Submit button text', 'Cancel button text', 'type', 'placeholder', submit_callback, 'Optional pre-filled value');
```</p>

<p>```js
notie.input('What city do you live in?', 'Submit', 'Cancel', 'text', 'Enter your city:', function(value_entered) {</p>

<pre><code>notie.alert(1, 'You entered: ' + value_entered, 2);
</code></pre>

<p>}, 'New York');
```</p>

<p>P.S: <code>style_number</code> -> <code>{1,2,3,4}</code> &lt;=> <code>{Success, Warning, Error, Information}</code></p>

<p><strong>GIF FTW:</strong></p>

<p><img src="/images/notie/notie.gif" alt="notie" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[clipboard.js]]></title>
    <link href="http://nmotw.in/github/clipboard.js/"/>
    <updated>2015-10-01T12:50:14+00:00</updated>
    <id>http://nmotw.in/github/clipboard.js</id>
    <content type="html"><![CDATA[<h1><a href="http://zenorocha.github.io/clipboard.js/">clipboard.js</a></h1>

<blockquote><p>A modern approach to copy text to clipboard!</p></blockquote>

<p>With 4.7K+ stars to it's repo with a modern approach to copy text coded with <code>ES2015/6</code> classes,  No Flash. Just 2kb!</p>

<p><a href="http://zenorocha.com/">Zeno Rocha</a>'s <code>clipboard.js</code> undoubtedly is the nmotw!</p>

<p>It makes use of  <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection">Selection</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand">execCommand</a> APIs.</p>

<p><strong>Get it:</strong> <code>npm install --save clipboard.js</code></p>

<p><strong>Sample usage:</strong>_</p>

<p>```js
var clipboard = new Clipboard('.btn');</p>

<p>clipboard.on('success', function(e) {</p>

<pre><code>console.info('Action:', e.action);
console.info('Text:', e.text);
console.info('Trigger:', e.trigger);

e.clearSelection();
</code></pre>

<p>});</p>

<p>clipboard.on('error', function(e) {</p>

<pre><code>console.error('Action:', e.action);
console.error('Trigger:', e.trigger);
</code></pre>

<p>});
```</p>

<p>In your <code>HTML</code>:</p>

<p>```html</p>

<!-- Target -->


<p><input id="foo" value="https://github.com/zenorocha/clipboard.js.git"></p>

<!-- Trigger -->


<p><button class="btn" data-clipboard-target="#foo"></p>

<pre><code>&lt;img src="assets/clippy.svg" alt="Copy to clipboard"&gt;
</code></pre>

<p></button>
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/clipboard.js/clipboard.js.gif" alt="clipboard.js" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[combokeys]]></title>
    <link href="http://nmotw.in/github/combokeys/"/>
    <updated>2015-07-23T14:32:46+00:00</updated>
    <id>http://nmotw.in/github/combokeys</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/combokeys">combokeys</a></p>

<blockquote><p>Handles keyboard shortcuts in the browser.</p></blockquote>

<p><code>combokeys</code> is a fork of <a href="https://github.com/ccampbell/mousetrap">ccampbell/mousetrap</a> with two main changes:</p>

<ul>
<li>Refactored as CommonJS</li>
<li>Doesn't automatically listen on the document. Instead, it is now a constructor and the element on which to listen must be provided on instantiation.</li>
</ul>


<p><strong>Install it:</strong> <code>npm install --save combokeys</code></p>

<p><strong>Sample usage:</strong></p>

<p>```js
var Combokeys = require("combokeys");
var Mousetrap = new Combokeys(document.documentElement);
// Or, instantiate it for one or more specific elements:
var firstCombokeys = new Combokeys(document.getElementById("first"));</p>

<p>firstCombokeys.bind('4', function() { console.log('4'); });
firstCombokeys.bind("?", function() { console.log('show shortcuts!'); });</p>

<p>```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/combokeys/combokeys.gif" alt="combokeys" /></p>

<p>Thanks to <a href="https://github.com/mightyiam">Shahar Or</a> for porting <code>mousetrap</code> to <code>combokeys</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ramjet]]></title>
    <link href="http://nmotw.in/github/ramjet/"/>
    <updated>2015-07-09T17:00:40+00:00</updated>
    <id>http://nmotw.in/github/ramjet</id>
    <content type="html"><![CDATA[<p><a href="http://npm.im/ramjet">ramjet</a></p>

<blockquote><p>Transform DOM elements into each another with smooth transitions</p></blockquote>

<p><code>ramjet</code> helps us to Morph DOM elements from one state to another with smooth transitions!</p>

<p>All it does is:</p>

<ul>
<li><p>Clone the elements and all their children.</p></li>
<li><p>Transform the second element so that it completely overlaps with the first.</p></li>
<li><p>Animating the two elements together until the first element has exactly the same position and dimensions as the second element.</p></li>
</ul>


<p><strong>install it:</strong> <code>npm install --save ramjet</code></p>

<p><strong>sample usage:</strong></p>

<p>```html</p>

<div id='a' style='background-color: red; font-size: 4em; padding: 1em;'>a</div>


<div id='b' style='background-color: blue; font-size: 4em; padding: 1em;'>b</div>




<script>
  ramjet.transform( a, b );
</script>


<p>```</p>

<p><strong>GIF FTW</strong></p>

<p><img src="/images/ramjet/ramjet.gif" alt="ramjet.js" /></p>

<p>Thanks to <a href="http://www.rich-harris.co.uk/">Rich Harris</a> for <code>ramjet</code> (:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fade]]></title>
    <link href="http://nmotw.in/github/fade/"/>
    <updated>2015-07-02T16:54:12+00:00</updated>
    <id>http://nmotw.in/github/fade</id>
    <content type="html"><![CDATA[<h1><a href="http://npm.im/fade">fade</a></h1>

<blockquote><p>Fade a HTML element using CSS transitions.</p></blockquote>

<p>Yes, you read it right, this module helps you to fade a HTML element. "Do one thing and do it right!", looks like the moto
behind this module, that lets us to <code>fade.in</code>, <code>fade.out</code> and fade an element to a specifie opacity, which also takes a
callback as one of it's params and execute it after animation ends and works across browsers with vendor prefixes.</p>

<p><strong>Install it:</strong> <code>npm install --save fade</code> # browserify it!</p>

<p><strong>Usage:</strong></p>

<p>```js
var fade = require('fade');</p>

<p>var el = document.querySelector('#el');</p>

<p>fade.out(el); // fade el out in 1s
fade.in(el, 1500); // fade el in in 1.5s
fade(el, 0.3, 3000); // fade el to opacity 0.3 in 3s
fade.out(el, function() {
  el.style.display = 'none'; // set display to none after fade out
});
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/fade/fade.gif" alt="fade.gif" /></p>

<p>Thanks to <a href="http://juliangruber.com/">Julian Gruber</a> for this sweet little module.</p>
]]></content>
  </entry>
  
</feed>
